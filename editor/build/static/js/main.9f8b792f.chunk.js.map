{"version":3,"sources":["PlayerWithNavButtons.js","editor/SectionPosition.js","editor/Sections.js","editor/ImageAreas.js","editor/SectionPages.js","editor/Editor.js","editor/EditorDataProvider.js","EditorLoader.js","index.js"],"names":["PlayerWithNavButtons","props","state","progress","duration","gotoAfterStopSec","endSec","playing","$player","React","createRef","this","setState","current","seekTo","playedSeconds","stopAndReturn","onProgressUpdate","console","log","startSec","mode","Math","max","pos","callback","setTimeout","bind","shift","maybeStop1SecPlaying","playSection","className","ref","url","videoUrl","width","height","onDuration","handleDuration","onProgress","handleProgress","onPlay","handleOnPlay","onReady","handleOnReady","progressInterval","onPause","handleStop","onEnded","controls","secsToString","map","item","onClick","onMoveToClick","handlePlayOneSecBefore","handlePlayOneSecAfter","Component","SectionPosition","section","sectionIdx","videoPlayerPosSecs","onSectionChanged","getPrevSectionEndSec","deltaStart","deltaEnd","toFixed","renderSectionPos","seekToAndStop","newSection","JSON","parse","stringify","undefined","parseFloat","oldVal","pages","Sections","sections","onSectionSelected","onSectionsChanged","useState","selectedSectionIdx","setSelectedSectionIdx","lastCreatedSectionIdx","setLastCreatedSectionIdx","lastCreatedSectionRef","useRef","handleClickSection","useEffect","scrollIntoView","newSections","length","push","key","ImageAreas","title","imgUrl","areas","onNewAreaAdded","onDeleteArea","image","setImage","imageLoaded","setImageLoaded","isMouseDown","setIsMouseDown","selectionX","setSelectionX","selectionY","setSelectionY","selectionWidth","setSelectionWidth","selectionHeight","setSelectionHeight","highlightedArea","setHighlightedArea","canvasRef","Image","src","onload","coeffOrigImageToScreenCoords","render","context","getContext","parseInt","drawImage","forEach","a","idx","fillStyle","fillRect","x","y","getCursorPosition","canvas","event","rect","getBoundingClientRect","clientX","left","clientY","top","onMouseMove","e","onMouseOut","onMouseDown","onMouseUp","area","onMouseOver","SectionPages","sectionPages","sectionPageAreas","onSectionPagesChanges","onSectionPageAreasChanged","p","type","checked","indexOf","id","onChange","pageIdx","newSectionPages","page","target","filter","it","handleOnChange","pageId","newArea","newSectionPageAreas","handleOnNewAreaAdded","areaIdx","splice","handleOnDeleteArea","Editor","onDataUpdated","currentSectionIdx","setCurrentSectionIdx","setVideoPlayerPosSecs","updatedSection","message","pageAreas","currentSectionSelectedPages","currentSectionPageAreas","EditorDataProvider","lastStateFromLocalStorage","onDataProvided","oldState","setOldState","opType","setOpType","setVideoUrl","setPages","handleOnSelect","name","value","readOnly","href","trim","split","pageUrl","Date","getTime","random","alert","EditorLoader","initialData","transformFromHumanReadable","data","setData","history","setHistory","redo","setRedo","textareaRef","doSetData","newData","window","localStorage","setItem","transformToHumanReadable","operationName","historyChunk","oldData","select","document","execCommand","undoData","pop","redoData","getItem","providedData","initSectionsPlayer","$element","videoTitle","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.9f8b792f.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport ReactPlayer from 'react-player';\n\nimport { secsToString } from 'emptybars-common/utils'\n\nimport './PlayerWithNavButtons.scss';\n\nclass PlayerWithNavButtons extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            progress: -1,\n            duration: -1,\n            gotoAfterStopSec: -1,\n            endSec: -1,\n            playing: true,\n        };\n        this.$player = React.createRef();\n    }\n\n    handleDuration(duration) {\n        this.setState({duration: duration});\n    }\n\n    stopAndReturn() {\n        const gotoAfterStopSec = this.state.gotoAfterStopSec;\n        this.setState({\n            endSec: -1,\n            gotoAfterStopSec: -1,\n            playing: false\n        });\n        this.$player.current.seekTo(gotoAfterStopSec, 'seconds');\n    }\n\n    handleProgress({ playedSeconds }) {\n        if (this.state.endSec > 0 && playedSeconds > this.state.endSec) {\n            this.stopAndReturn();\n        }\n        this.setState({progress: playedSeconds});\n        this.props.onProgressUpdate(playedSeconds);\n    };\n\n    handleOnPlay() {\n        this.setState({playing: true});\n    }\n\n    handleOnReady() {\n        console.log('ready!');\n    }\n\n    handleStop() {\n        this.setState({playing: false});\n    }\n\n    playSection(startSec, endSec, mode) {\n        this.$player.current.seekTo(startSec, 'seconds');\n        this.setState({\n            // TODO: remove magic strings\n            gotoAfterStopSec: Math.max(mode === 'STAY_AT_END' ? endSec : startSec, 0),\n            endSec: Math.max(endSec, 0.01),\n            playing: true\n        });\n    }\n\n    seekTo(pos) {\n        this.$player.current.seekTo(pos, 'seconds');\n    }\n\n    seekToAndStop(pos) {\n        this.setState({\n            playing: false\n        });\n        this.$player.current.seekTo(pos, 'seconds');\n    }\n\n    maybeStop1SecPlaying(callback) {\n        if (this.state.playing && this.state.gotoAfterStopSec > 0) {\n            this.stopAndReturn();\n            // We need timeout to give player time to stop and update progress\n            setTimeout(callback.bind(this), 100);\n        } else {\n            callback();\n        }\n    }\n\n    onMoveToClick(shift) {\n        this.maybeStop1SecPlaying(() => {\n            this.$player.current.seekTo(Math.max(this.state.progress + shift, 0), 'seconds');\n        });\n    };\n\n\n    handlePlayOneSecBefore() {\n        this.maybeStop1SecPlaying(() => {\n            this.playSection(this.state.progress - 1, this.state.progress, 'STAY_AT_END');\n        });\n    }\n\n    handlePlayOneSecAfter() {\n        this.maybeStop1SecPlaying(() => {\n            this.playSection(this.state.progress, this.state.progress + 1, 'STAY_AT_START');\n        });\n    }\n\n    render() {\n            const moveTo = [-5, -1, -0.5, -0.1, 0.1, 0.5, 1, 5];\n\n            return (\n                <div className='playWithNavButtons'>\n                    <ReactPlayer\n                        ref={this.$player}\n                        url={this.props.videoUrl}\n                        width='100%'\n                        height='100%'\n                        onDuration={this.handleDuration.bind(this)}\n                        onProgress={this.handleProgress.bind(this)}\n                        onPlay={this.handleOnPlay.bind(this)}\n                        onReady={this.handleOnReady.bind(this)}\n                        progressInterval={100}\n                        onPause={this.handleStop.bind(this)}\n                        onEnded={this.handleStop.bind(this)}\n                        playing={this.state.playing}\n                        controls={true}\n                    />\n                    <div className='positionAndControls'>\n                        Current position: <span className='position'>{secsToString(this.state.progress)}</span>\n                        <div className='controls'>\n                            {\n                                moveTo.map(item => <div className='gotoButton' onClick={(() => this.onMoveToClick(item)).bind(this)}>{item > 0 ? '+' + item : item}</div>)\n                            }\n                            <div className='gotoButton' onClick={this.handlePlayOneSecBefore.bind(this)} >Play 1 sec before</div>\n                            <div className='gotoButton' onClick={this.handlePlayOneSecAfter.bind(this)} >Play 1 sec after</div>\n                        </div>\n                    </div>\n                </div>\n            );\n    }\n}\n\nexport default PlayerWithNavButtons;","import React from 'react';\nimport { secsToString } from \"emptybars-common/utils\";\n\nimport './SectionPosition.scss';\n\nfunction SectionPosition({ $player, section, sectionIdx, videoPlayerPosSecs, onSectionChanged: onSectionChanged, getPrevSectionEndSec: getPrevSectionEndSec}) {\n    const handlePlayCurrentSection = () => {\n        $player.playSection(section.startSec, section.endSec, 'STAY_AT_START');\n    }\n\n    const handleJumpSectionStart = () => {\n        $player.seekToAndStop(section.startSec);\n    }\n\n    const handleJumpSectionEnd = () => {\n        $player.seekToAndStop(section.endSec);\n    }\n\n    const hanleSetCurrentTimeAsSectionStart = () => {\n        const newSection = JSON.parse(JSON.stringify(section));\n        newSection.startSec = parseFloat(videoPlayerPosSecs.toFixed(1));\n        onSectionChanged(newSection, undefined, \"update section start time\");\n    }\n\n    const handleSetSectionStartToLastSectionEnd = () => {\n        const newSection = JSON.parse(JSON.stringify(section));\n        newSection.startSec = getPrevSectionEndSec();\n        onSectionChanged(newSection, undefined, \"update section start time\");\n    }\n\n    const hanleSetCurrentTimeAsSectionEnd = () => {\n        const newSection = JSON.parse(JSON.stringify(section));\n        newSection.endSec = parseFloat(videoPlayerPosSecs.toFixed(1));\n        onSectionChanged(newSection, undefined, 'update section end time');\n    }\n\n    const renderSectionPos = () => {\n        const deltaStart = (videoPlayerPosSecs - section.startSec);\n        const deltaEnd = (videoPlayerPosSecs - section.endSec);\n\n        var className;\n        if (deltaStart >= 0 && deltaEnd <= 0) {\n            className = 'inside';\n        } else if (deltaStart < 0) {\n            className = 'before';\n        } else if (deltaEnd > 0) {\n            className =  'after';\n        }\n\n        return <span className={className}>Section start delta={deltaStart.toFixed(1)}, delta end delta={deltaEnd.toFixed(1)}</span>;\n    }\n\n    const handleSplitSection = () => {\n        const newSection = JSON.parse(JSON.stringify(section));\n        const oldVal = section.endSec;\n        newSection.endSec = parseFloat(videoPlayerPosSecs.toFixed(1));\n        onSectionChanged(newSection, JSON.parse(JSON.stringify({\n            startSec: newSection.endSec,\n            endSec: oldVal,\n            pages: newSection.pages\n        })), 'split section');\n    }\n\n    return (\n        <div className='sectionPosition'>\n            <div className='title'>Selected Section #{sectionIdx + 1} ({secsToString(section.startSec)} - {secsToString(section.endSec)})</div>\n            <div className='playerPosition'>{renderSectionPos()}</div>\n            <div className='controls'>\n                <div className='button' onClick={handlePlayCurrentSection}>\n                    Play the whole section\n                </div>\n                <div className='group'>\n                    <div className='button'  onClick={handleJumpSectionStart}>\n                        Jump to section start\n                    </div>\n                    <div className='button'  onClick={handleJumpSectionEnd}>\n                        Jump to section end\n                    </div>\n                </div>\n                <div className='button'  onClick={handleSetSectionStartToLastSectionEnd}>\n                    Set section start at prev. section end\n                </div>\n                <div className='group'>\n                    <div className='button'  onClick={hanleSetCurrentTimeAsSectionStart}>\n                        Set as section's start time\n                    </div>\n                    <div className='button'  onClick={hanleSetCurrentTimeAsSectionEnd}>\n                        Set as section's end time\n                    </div>\n                </div>\n                {(section.startSec < videoPlayerPosSecs && section.endSec > videoPlayerPosSecs)\n                    ?\n                    <div className='button' onClick={handleSplitSection}>\n                        Split section at {secsToString(videoPlayerPosSecs)}\n                    </div>\n                    :'' }\n            </div>\n        </div>\n    );\n}\n\nexport default SectionPosition;","import React, {useState, useRef, useEffect} from 'react';\nimport { secsToString } from \"emptybars-common/utils\";\n\nimport './Sections.scss';\n\nfunction Sections({ sections, onSectionSelected, onSectionsChanged}) {\n    var [selectedSectionIdx, setSelectedSectionIdx] = useState(-1);\n    var [lastCreatedSectionIdx, setLastCreatedSectionIdx] = useState(-1);\n    const lastCreatedSectionRef = useRef(null);\n\n    const handleClickSection = (sectionIdx, section) => {\n        setSelectedSectionIdx(sectionIdx);\n        console.log(section);\n        onSectionSelected(sectionIdx, section);\n    };\n\n    useEffect(() => {\n        if (lastCreatedSectionRef.current && lastCreatedSectionIdx >= 0) {\n            lastCreatedSectionRef.current.scrollIntoView();\n            setLastCreatedSectionIdx(-1);\n        }\n    });\n\n    const handleAddSectionClick = () => {\n        const newSections = JSON.parse(JSON.stringify(sections));\n        if (newSections.length > 0) {\n            newSections.push({\n                startSec: sections[sections.length-1].endSec,\n                endSec: sections[sections.length-1].endSec + 10\n            });\n        } else {\n            newSections.push({\n                startSec: 0,\n                endSec: 10\n            });\n        }\n        onSectionsChanged(newSections, \"add section\");\n        setLastCreatedSectionIdx(newSections.length - 1);\n        handleClickSection(newSections.length - 1, newSections[newSections.length-1]);\n    }\n\n    return (\n        <div className='sections'>\n            <div className='scrolling'>\n                <div className='addButton' onClick={handleAddSectionClick.bind(null)}>\n                    Add section\n                </div>\n\n                {sections.map(({ startSec, endSec }, key) => (\n                    <div\n                        className={`button ${\n                            selectedSectionIdx === key ? 'active' : ''\n                        }`}\n                        key={key}\n                        onClick={handleClickSection.bind(null, key, sections[key])}\n                        ref={(key == lastCreatedSectionIdx) ? lastCreatedSectionRef : null}\n                    >\n                        Section {key+1}: {secsToString(startSec)} - {secsToString(endSec)}\n                    </div>\n                ))}\n            </div>\n         </div>);\n}\n\nexport default Sections;\n","import React, { useState, useRef, useEffect } from 'react';\n\nimport './ImageAreas.scss';\n\nfunction ImageAreas({ title, imgUrl, width, areas, onNewAreaAdded, onDeleteArea }) {\n    // var [height, setHeight] = useState(100);\n    var [image, setImage] = useState(null);\n    var [imageLoaded, setImageLoaded] = useState(false);\n    var [isMouseDown, setIsMouseDown] = useState(false);\n    var [selectionX, setSelectionX] = useState(0);\n    var [selectionY, setSelectionY] = useState(0);\n    var [selectionWidth, setSelectionWidth] = useState(0);\n    var [selectionHeight, setSelectionHeight] = useState(0);\n    var [highlightedArea, setHighlightedArea] = useState(-1);\n    var canvasRef = useRef(null);\n\n    if (!image) {\n        image = new Image();\n        image.src=imgUrl;\n        image.onload = () => {\n            setImageLoaded(true);\n        }\n        setImage(image);\n    }\n\n    var coeffOrigImageToScreenCoords = (width * 1.0 / image.width);\n\n    var height = 100;\n    const render = () => {\n        if (canvasRef && canvasRef.current && image && image.width && image.height && imageLoaded) {\n            var context = canvasRef.current.getContext(\"2d\");\n            height = parseInt(image.height * coeffOrigImageToScreenCoords);\n            context.drawImage(image, 0, 0, image.width, image.height, 0, 0, width, height);\n\n            areas.forEach((a, idx) => {\n                context.fillStyle = idx == highlightedArea ? 'rgba(255, 0, 0, 0.7)' : 'rgba(255, 255, 0, 0.5)';\n                context.fillRect(a.x*coeffOrigImageToScreenCoords, a.y*coeffOrigImageToScreenCoords, a.width*coeffOrigImageToScreenCoords, a.height*coeffOrigImageToScreenCoords);\n            });\n\n            if (isMouseDown) {\n                context.fillStyle = 'rgba(255, 0, 0, 0.5)';\n                context.fillRect(selectionX, selectionY, selectionWidth, selectionHeight);\n            }\n        }\n    };\n    render();\n\n    function getCursorPosition(canvas, event) {\n        const rect = canvas.getBoundingClientRect()\n        const x = event.clientX - rect.left\n        const y = event.clientY - rect.top\n        return [x, y]\n    }\n\n    const handleMouseMove = (e) => {\n        var [x, y] = getCursorPosition(canvasRef.current, e);\n        if (isMouseDown) {\n            setSelectionWidth(x - selectionX);\n            setSelectionHeight(y - selectionY);\n        }\n    }\n\n    const handleMouseDown = (e) => {\n        var [x, y] = getCursorPosition(canvasRef.current, e);\n        setIsMouseDown(true);\n        setSelectionX(x);\n        setSelectionY(y);\n        setSelectionHeight(0);\n        setSelectionWidth(0);\n    }\n\n    const handleMouseUp = (e) => {\n        if (height > 10 && width > 10) {\n            onNewAreaAdded({\n                x: parseInt(selectionX / coeffOrigImageToScreenCoords),\n                y: parseInt(selectionY / coeffOrigImageToScreenCoords),\n                width: parseInt(selectionWidth / coeffOrigImageToScreenCoords),\n                height: parseInt(selectionHeight / coeffOrigImageToScreenCoords)\n            })\n        }\n        setIsMouseDown(false);\n    }\n\n    const handleMouseOut = (e) => {\n        setIsMouseDown(false);\n    }\n\n    const handleMouseOverArea = (areaIdx) => {\n        setHighlightedArea(areaIdx);\n    }\n\n    const handleMouseOutArea = (areaIdx) => {\n        setHighlightedArea(-1);\n    }\n\n    const handleDelete = (areaIdx) => {\n        onDeleteArea(areaIdx);\n    }\n\n    useEffect(() => {\n        render();\n    });\n\n    return (\n        <div className='imageAreas'>\n            <div className='canvas'>\n                <div className='title'>{title}</div>\n                <canvas width={width} height={height} ref={canvasRef} onMouseMove={handleMouseMove} onMouseOut={handleMouseOut} onMouseDown={handleMouseDown} onMouseUp={handleMouseUp}>\n                </canvas>\n            </div>\n            <div className='controls'>\n                {areas.map((area, idx) => {\n                    return (\n                        <div className='item'\n                                 onMouseOver={(() => handleMouseOverArea(idx)).bind(this)}\n                                 onMouseOut={(() => handleMouseOutArea(idx)).bind(this)}\n                                >\n                                <div onClick={() => handleDelete(idx)}>\n                                    Area {idx+1}\n                                    <img src='https://github.com/stillwaiting/emptybars/raw/main/Delete-Button.png' width={16} />\n                                </div>\n                        </div>)\n                })}\n            </div>\n\n        </div>\n    );\n}\n\nexport default ImageAreas;","import React from 'react';\nimport ImageAreas from \"./ImageAreas\";\n\nimport './SectionPages.scss';\n\nfunction SectionPages({ pages, sectionPages, sectionPageAreas, onSectionPagesChanges, onSectionPageAreasChanged }) {\n    const handleOnChange = (e, pageIdx) => {\n        var newSectionPages = JSON.parse(JSON.stringify(sectionPages));\n        const page = pages[pageIdx];\n        if (e.target.checked) {\n            newSectionPages.push(page.id);\n        } else {\n            newSectionPages = newSectionPages.filter(it => it != page.id);\n        }\n        onSectionPagesChanges(newSectionPages, 'list of section pages updated');\n    }\n\n    const handleOnNewAreaAdded = (pageId, newArea) => {\n        const newSectionPageAreas = JSON.parse(JSON.stringify(sectionPageAreas));\n        if (!newSectionPageAreas[pageId]) {\n            newSectionPageAreas[pageId] = [newArea];\n        } else {\n            newSectionPageAreas[pageId].push(newArea);\n        }\n        onSectionPageAreasChanged(newSectionPageAreas, 'page area added');\n    }\n\n    const handleOnDeleteArea = (pageId, areaIdx) => {\n        const newSectionPageAreas = JSON.parse(JSON.stringify(sectionPageAreas));\n        newSectionPageAreas[pageId].splice(areaIdx, 1);\n        onSectionPageAreasChanged(newSectionPageAreas, 'page area deleted');\n    }\n\n    return <div className='sectionPages'>\n        {pages.map((p, idx) => {\n            return <div>\n                <input type=\"checkbox\" checked={(sectionPages.indexOf(p.id)) >= 0 ? true : false} onChange={((e) => handleOnChange(e, idx)).bind(this)} /> Page #{idx + 1}\n            </div>\n        })}\n\n        {pages.map((p, idx) => {\n            return (sectionPages.indexOf(p.id) >= 0) ?\n                    <div className='page'>\n                        <ImageAreas\n                            title={`Page #${idx+1}`}\n                            imgUrl={p.url} width = {500} areas={sectionPageAreas[p.id] || [] }\n                            onNewAreaAdded={((area) => handleOnNewAreaAdded(p.id, area)).bind(this)}\n                            onDeleteArea={((areaIdx) => handleOnDeleteArea(p.id, areaIdx)).bind(this)}\n                        />\n                    </div>\n                    : '';\n        })}\n    </div>;\n};\n\nexport default SectionPages;\n","import React, { useState, useRef } from 'react';\nimport PlayerWithNavButtons from '../PlayerWithNavButtons';\nimport SectionPosition from './SectionPosition';\nimport Sections from './Sections';\n\nimport Pages from \"./Pages\";\nimport SectionPages from \"./SectionPages\";\n\nimport './Editor.css';\n\nfunction Editor({ sections, pages, videoUrl, onDataUpdated }) {\n    var [currentSectionIdx, setCurrentSectionIdx] = useState(-1);\n    const [videoPlayerPosSecs, setVideoPlayerPosSecs] = useState(0);\n\n    const $player = useRef(null);\n\n    if (currentSectionIdx >= sections.length) {\n        currentSectionIdx = -1;\n        setCurrentSectionIdx(-1);\n    }\n\n    const handleSectionSelected = (sectionIdx, section) => {\n        setCurrentSectionIdx(sectionIdx);\n        $player.current.seekToAndStop(section.startSec)\n    };\n\n    const handleOnPagesUpdated = (pages, message) => {\n        onDataUpdated({ sections, pages, videoUrl }, message);\n    }\n\n    const onProgressUpdate = (playedSeconds) => {\n        setVideoPlayerPosSecs(parseFloat(playedSeconds.toFixed(1)));\n    };\n\n    const onSectionChanged = (updatedSection, newSection, message) => {\n        const newSections = JSON.parse(JSON.stringify(sections));\n        newSections[currentSectionIdx] = updatedSection;\n        if (newSection) {\n            newSections.splice(currentSectionIdx + 1, 0, newSection);\n        }\n        onDataUpdated({ sections: newSections, pages, videoUrl }, message);\n    };\n\n    const onSectionsChanged = (newSections, message) => {\n        onDataUpdated({ sections: newSections, pages, videoUrl }, message);\n    }\n\n    const onSectionPagesChanged = (currentSectionSelectedPages, message) => {\n        const newSections = JSON.parse(JSON.stringify(sections));\n        newSections[currentSectionIdx].pages = currentSectionSelectedPages;\n        onDataUpdated({ sections: newSections, pages, videoUrl }, message);\n    };\n\n    const onSectionPageAreasChanged = (currentSectionPageAreas, message) => {\n        const newSections = JSON.parse(JSON.stringify(sections));\n        newSections[currentSectionIdx].pageAreas = currentSectionPageAreas;\n        onDataUpdated({ sections: newSections, pages, videoUrl }, message);\n    };\n\n    const getPrevSectionEndSec = () => {\n        if (currentSectionIdx == 0) {\n            return 0;\n        }\n        return sections[currentSectionIdx-1].endSec;\n    }\n\n    return (\n            <div className='editor'>\n                <div>\n                    <PlayerWithNavButtons videoUrl={videoUrl} onProgressUpdate={onProgressUpdate} ref={$player} />\n\n                    {currentSectionIdx >= 0\n                        ?\n                        <div>\n                            <SectionPosition\n                                $player={$player.current}\n                                section={sections[currentSectionIdx]}\n                                sectionIdx={currentSectionIdx}\n                                onSectionChanged={onSectionChanged}\n                                videoPlayerPosSecs={videoPlayerPosSecs}\n                                getPrevSectionEndSec={getPrevSectionEndSec}\n                            />\n                            <SectionPages\n                                pages={pages || []}\n                                sectionPages={sections[currentSectionIdx].pages || []}\n                                sectionPageAreas={sections[currentSectionIdx].pageAreas || {}}\n                                onSectionPagesChanges={onSectionPagesChanged}\n                                onSectionPageAreasChanged={onSectionPageAreasChanged}\n                            />\n                        </div>\n                        : ''\n                    }\n\n                </div>\n\n                <Sections sections={sections} onSectionSelected={handleSectionSelected} onSectionsChanged={onSectionsChanged} />\n\n                {/*<Pages pages={pages || []} onPagesUpdated={handleOnPagesUpdated} />*/}\n\n            </div>\n    );\n}\n\nexport default Editor;\n","import React, { useState } from 'react';\n\nimport './EditorDataProvider.scss';\n\nconst OP_NEW = 'new';\nconst OP_LOAD_OLD = 'loadOld';\nconst OP_RESTORE = 'restore';\n\nexport default function EditorDataProvider({ lastStateFromLocalStorage, onDataProvided}) {\n    const [oldState, setOldState] = useState('');\n    const [opType, setOpType] = useState('');\n    const [videoUrl, setVideoUrl] = useState('');\n    const [pages, setPages] = useState('');\n\n    const handleOnSelect = (opType) => {\n        setOpType(opType);\n    }\n\n    const handleOldStateChanged = (e) => {\n        setOldState(e.target.value);\n    }\n\n    const handleOnVideoUrlChanged = (e) => {\n        setVideoUrl(e.target.value);\n    }\n\n    const handleOnPagesChanged = (e) => {\n        setPages(e.target.value);\n    }\n\n    const handleOnSubmit = () => {\n        switch (opType) {\n            case OP_LOAD_OLD:\n                onDataProvided(JSON.parse(oldState));\n                return;\n            case OP_RESTORE:\n                onDataProvided(JSON.parse(lastStateFromLocalStorage));\n                return;\n            case OP_NEW: {\n                onDataProvided({\n                    videoUrl,\n                    sections: [],\n                    pages: pages.trim().split(\"\\n\").map(p => p.trim()).filter(p => p).map(pageUrl => ({\n                        url: pageUrl,\n                        id: '' + (new Date().getTime()) + Math.random()\n                    }))\n                });\n                return\n            }\n\n            default:\n                alert('TBD');\n        }\n    }\n\n    return <table className='editorDataProvider'><tbody><tr>\n            <td className='firstCol' onClick={handleOnSelect.bind(this, OP_NEW)}>\n                <input type='radio' name='operation' onChange={handleOnSelect.bind(this, OP_NEW)} checked={opType == OP_NEW} />\n                Create new\n            </td>\n            <td className='secondCol'>\n                <p>\n                    Video URL:\n                </p>\n                <p>\n                    <input type='text' onChange={handleOnVideoUrlChanged} value={videoUrl} readOnly={opType != OP_NEW} />\n                </p>\n                <p>\n                    Sheet music pages (one URL per line):\n                </p>\n                <p>\n                    <textarea onChange={handleOnPagesChanged} value={pages}  readOnly={opType != OP_NEW} />\n                </p>\n            </td>\n        </tr><tr>\n            <td className='firstCol' onClick={handleOnSelect.bind(this, OP_LOAD_OLD)}>\n                <input type='radio' name='operation' onChange={handleOnSelect.bind(this, OP_LOAD_OLD)} checked={opType == OP_LOAD_OLD} />\n                Load old\n            </td>\n            <td className='secondCol'>\n                <p>\n                    Old sections content (paste here)\n                </p>\n                <p>\n                    <textarea onChange={handleOldStateChanged} value={oldState} readOnly={opType != OP_LOAD_OLD} />\n                </p>\n            </td>\n        </tr>{lastStateFromLocalStorage\n            ? <tr>\n                <td className='firstCol' onClick={handleOnSelect.bind(this, OP_RESTORE)}>\n                    <input type='radio' name='operation' onChange={handleOnSelect.bind(this, OP_RESTORE)} checked={opType == OP_RESTORE}  />\n                    Restore from local storage\n                </td>\n                <td className='secondCol'>\n                    <a href={JSON.parse(lastStateFromLocalStorage).videoUrl} target='_blank'>{JSON.parse(lastStateFromLocalStorage).videoUrl}</a>\n                </td>\n            </tr>\n            : ''\n        }{opType ? <tr>\n            <td className='lastRow'>\n                <button onClick={handleOnSubmit}>Submit</button>\n            </td>\n            <td className='lastRow'></td>\n        </tr> : ''}</tbody></table>;\n\n};","import React, { useState, useRef } from 'react';\nimport Editor from './editor/Editor';\nimport { transformFromHumanReadable, transformToHumanReadable} from \"emptybars-common/utils\";\n\nimport './EditorLoader.scss';\nimport EditorDataProvider from \"./editor/EditorDataProvider\";\n\nconst LOCAL_STORAGE_KEY = 'emptybarsEditorData';\n\nfunction EditorLoader(initialData) {\n    var [data, setData] = useState(transformFromHumanReadable(initialData));\n    var [history, setHistory] = useState([]);\n    var [redo, setRedo] = useState([]);\n    const textareaRef = useRef(null);\n\n    const doSetData = (newData) => {\n        setData(newData);\n        window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(transformToHumanReadable(newData)));\n    }\n\n\n    const handleOnDataUpdated = (newData, operationName) => {\n        const historyChunk = {oldData: JSON.parse(JSON.stringify(data)), newData: JSON.parse(JSON.stringify(newData)), operationName};\n        doSetData(newData);\n\n        history.push(historyChunk);\n        setHistory(history);\n\n        redo = [];\n        setRedo(redo)\n    }\n\n    const handleOnDataProvided = (providedData) => {\n        doSetData(transformFromHumanReadable(providedData));\n    }\n\n    const handleCopyClick = () => {\n        textareaRef.current.select();\n        document.execCommand('copy');\n        alert('Copied!');\n    }\n\n    const handleUndo = () => {\n        const undoData = history.pop();\n        doSetData(undoData.oldData);\n\n        setHistory(history);\n\n        redo.push(undoData);\n        setRedo(redo);\n    }\n\n    const handleRedo = () => {\n        const redoData = redo.pop();\n        doSetData(redoData.newData);\n\n        history.push(redoData);\n        setHistory(history);\n\n        setRedo(redo);\n    }\n\n    return <div>{data.videoUrl ?\n            <div className=\"editorLoader\">\n                <Editor {...data} onDataUpdated={handleOnDataUpdated}/>\n                <textarea readOnly={true} value={JSON.stringify(transformToHumanReadable(data), null, 2)}\n                          ref={textareaRef}/>\n                <div className=\"copyButton\" onClick={handleCopyClick}>copy</div>\n                {history.length > 0\n                    ? <div>\n                        Last operation: {history[history.length - 1].operationName} <span className=\"undoButton\"\n                                                                                          onClick={handleUndo}>undo</span>\n                    </div>\n                    : ''\n                }\n                {redo.length > 0\n                    ? <div>\n                        Cancelled operation: {redo[redo.length - 1].operationName} <span className=\"undoButton\"\n                                                                                         onClick={handleRedo}>redo</span>\n                    </div>\n                    : ''\n                }\n            </div>\n            :\n            <EditorDataProvider lastStateFromLocalStorage={window.localStorage.getItem(LOCAL_STORAGE_KEY)} onDataProvided={handleOnDataProvided} />\n    }</div>;\n}\n\nexport default EditorLoader;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport EditorLoader from './EditorLoader';\n\nimport {initSectionsPlayer} from \"emptybars-common/initialiser\";\n\ninitSectionsPlayer(($element, data) => {\n\n    const {sections, pages, videoUrl, videoTitle} = data;\n\n    ReactDOM.render(\n        <React.StrictMode>\n          <EditorLoader sections={sections || []} pages={pages || []} videoUrl={videoUrl} />\n        </React.StrictMode>,\n        $element\n    );\n});\n\n"],"sourceRoot":""}