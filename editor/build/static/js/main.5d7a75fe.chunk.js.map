{"version":3,"sources":["PlayerWithNavButtons.js","editor/FragmentPosition.js","editor/Fragments.js","editor/ImageAreas.js","editor/FragmentPages.js","editor/Editor.js","editor/EditorDataProvider.js","EditorLoader.js","index.js"],"names":["PlayerWithNavButtons","props","state","progress","duration","gotoAfterStopSec","endSec","playing","$player","React","createRef","this","setState","current","seekTo","playedSeconds","stopAndReturn","onProgressUpdate","console","log","startSec","mode","Math","max","pos","callback","setTimeout","bind","shift","maybeStop1SecPlaying","playFragment","className","ref","url","videoUrl","width","height","onDuration","handleDuration","onProgress","handleProgress","onPlay","handleOnPlay","onReady","handleOnReady","progressInterval","onPause","handleStop","onEnded","controls","secsToString","map","item","onClick","onMoveToClick","handlePlayOneSecBefore","handlePlayOneSecAfter","Component","FragmentPosition","fragment","fragmentIdx","videoPlayerPosSecs","onFragmentChanged","getPrevFragmentEndSec","deltaStart","deltaEnd","toFixed","renderFragmentPos","seekToAndStop","newFragment","JSON","parse","stringify","undefined","parseFloat","oldVal","pages","Fragments","fragments","onFragmentSelected","onFragmentsChanged","useState","selectedFragmentIdx","setSelectedFragmentIdx","lastCreatedFragmentIdx","setLastCreatedFragmentIdx","lastCreatedFragmentRef","useRef","handleClickFragment","useEffect","scrollIntoView","newFragments","length","push","key","ImageAreas","title","imgUrl","areas","onNewAreaAdded","onDeleteArea","image","setImage","imageLoaded","setImageLoaded","isMouseDown","setIsMouseDown","selectionX","setSelectionX","selectionY","setSelectionY","selectionWidth","setSelectionWidth","selectionHeight","setSelectionHeight","highlightedArea","setHighlightedArea","canvasRef","Image","src","onload","coeffOrigImageToScreenCoords","render","context","getContext","parseInt","drawImage","forEach","a","idx","fillStyle","fillRect","x","y","getCursorPosition","canvas","event","rect","getBoundingClientRect","clientX","left","clientY","top","onMouseMove","e","onMouseOut","onMouseDown","onMouseUp","area","onMouseOver","FragmentPages","fragmentPages","fragmentPageAreas","onFragmentPagesChanges","onFragmentPageAreasChanged","p","type","checked","indexOf","id","onChange","pageIdx","newFragmentPages","page","target","filter","it","handleOnChange","pageId","newArea","newFragmentPageAreas","handleOnNewAreaAdded","areaIdx","splice","handleOnDeleteArea","Editor","onDataUpdated","currentFragmentIdx","setCurrentFragmentIdx","setVideoPlayerPosSecs","updatedFragment","message","pageAreas","currentFragmentSelectedPages","currentFragmentPageAreas","EditorDataProvider","lastStateFromLocalStorage","onDataProvided","oldState","setOldState","opType","setOpType","setVideoUrl","setPages","handleOnSelect","name","value","readOnly","href","trim","split","pageUrl","Date","getTime","random","alert","EditorLoader","initialData","transformFromHumanReadable","data","setData","history","setHistory","redo","setRedo","textareaRef","doSetData","newData","window","localStorage","setItem","transformToHumanReadable","operationName","historyChunk","oldData","select","document","execCommand","undoData","pop","redoData","getItem","providedData","initFragmentsPlayer","$element","videoTitle","ReactDOM","StrictMode"],"mappings":"sbA4IeA,G,wDAnIX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,UAAW,EACXC,UAAW,EACXC,kBAAmB,EACnBC,QAAS,EACTC,SAAS,GAEb,EAAKC,QAAUC,IAAMC,YATN,E,2DAYJN,GACXO,KAAKC,SAAS,CAACR,SAAUA,M,sCAIzB,IAAMC,EAAmBM,KAAKT,MAAMG,iBACpCM,KAAKC,SAAS,CACVN,QAAS,EACTD,kBAAmB,EACnBE,SAAS,IAEbI,KAAKH,QAAQK,QAAQC,OAAOT,EAAkB,a,wCAGf,IAAlBU,EAAiB,EAAjBA,cACTJ,KAAKT,MAAMI,OAAS,GAAKS,EAAgBJ,KAAKT,MAAMI,QACpDK,KAAKK,gBAETL,KAAKC,SAAS,CAACT,SAAUY,IACzBJ,KAAKV,MAAMgB,iBAAiBF,K,qCAI5BJ,KAAKC,SAAS,CAACL,SAAS,M,sCAIxBW,QAAQC,IAAI,Y,mCAIZR,KAAKC,SAAS,CAACL,SAAS,M,mCAGfa,EAAUd,EAAQe,GAC3BV,KAAKH,QAAQK,QAAQC,OAAOM,EAAU,WACtCT,KAAKC,SAAS,CAEVP,iBAAkBiB,KAAKC,IAAa,gBAATF,EAAyBf,EAASc,EAAU,GACvEd,OAAQgB,KAAKC,IAAIjB,EAAQ,KACzBC,SAAS,M,6BAIViB,GACHb,KAAKH,QAAQK,QAAQC,OAAOU,EAAK,a,oCAGvBA,GACVb,KAAKC,SAAS,CACVL,SAAS,IAEbI,KAAKH,QAAQK,QAAQC,OAAOU,EAAK,a,2CAGhBC,GACbd,KAAKT,MAAMK,SAAWI,KAAKT,MAAMG,iBAAmB,GACpDM,KAAKK,gBAELU,WAAWD,EAASE,KAAKhB,MAAO,MAEhCc,M,oCAIMG,GAAQ,IAAD,OACjBjB,KAAKkB,sBAAqB,WACtB,EAAKrB,QAAQK,QAAQC,OAAOQ,KAAKC,IAAI,EAAKrB,MAAMC,SAAWyB,EAAO,GAAI,gB,+CAKpD,IAAD,OACrBjB,KAAKkB,sBAAqB,WACtB,EAAKC,aAAa,EAAK5B,MAAMC,SAAW,EAAG,EAAKD,MAAMC,SAAU,oB,8CAI/C,IAAD,OACpBQ,KAAKkB,sBAAqB,WACtB,EAAKC,aAAa,EAAK5B,MAAMC,SAAU,EAAKD,MAAMC,SAAW,EAAG,sB,+BAI9D,IAAD,OAGD,OACI,yBAAK4B,UAAU,sBACX,kBAAC,IAAD,CACIC,IAAKrB,KAAKH,QACVyB,IAAKtB,KAAKV,MAAMiC,SAChBC,MAAM,OACNC,OAAO,OACPC,WAAY1B,KAAK2B,eAAeX,KAAKhB,MACrC4B,WAAY5B,KAAK6B,eAAeb,KAAKhB,MACrC8B,OAAQ9B,KAAK+B,aAAaf,KAAKhB,MAC/BgC,QAAShC,KAAKiC,cAAcjB,KAAKhB,MACjCkC,iBAAkB,IAClBC,QAASnC,KAAKoC,WAAWpB,KAAKhB,MAC9BqC,QAASrC,KAAKoC,WAAWpB,KAAKhB,MAC9BJ,QAASI,KAAKT,MAAMK,QACpB0C,UAAU,IAEd,yBAAKlB,UAAU,uBAAf,qBACsB,0BAAMA,UAAU,YAAYmB,YAAavC,KAAKT,MAAMC,WACtE,yBAAK4B,UAAU,YArBZ,EAAE,GAAI,GAAI,IAAM,GAAK,GAAK,GAAK,EAAG,GAuBtBoB,KAAI,SAAAC,GAAI,OAAI,yBAAKrB,UAAU,aAAasB,QAAU,kBAAM,EAAKC,cAAcF,IAAOzB,KAAK,IAAQyB,EAAO,EAAI,IAAMA,EAAOA,MAElI,yBAAKrB,UAAU,aAAasB,QAAS1C,KAAK4C,uBAAuB5B,KAAKhB,OAAtE,qBACA,yBAAKoB,UAAU,aAAasB,QAAS1C,KAAK6C,sBAAsB7B,KAAKhB,OAArE,2B,GA7HOF,IAAMgD,Y,MC8F1BC,MAhGf,YAA4H,IAAhGlD,EAA+F,EAA/FA,QAASmD,EAAsF,EAAtFA,SAAUC,EAA4E,EAA5EA,YAAaC,EAA+D,EAA/DA,mBAAoBC,EAA2C,EAA3CA,kBAAmBC,EAAwB,EAAxBA,sBA0D/F,OACI,yBAAKhC,UAAU,oBACX,yBAAKA,UAAU,SAAf,sBAA2C6B,EAAc,EAAzD,KAA8DV,YAAaS,EAASvC,UAApF,MAAkG8B,YAAaS,EAASrD,QAAxH,KACA,yBAAKyB,UAAU,kBA9BG,WACtB,IAGIA,EAHEiC,EAAcH,EAAqBF,EAASvC,SAC5C6C,EAAYJ,EAAqBF,EAASrD,OAWhD,OARI0D,GAAc,GAAKC,GAAY,EAC/BlC,EAAY,SACLiC,EAAa,EACpBjC,EAAY,SACLkC,EAAW,IAClBlC,EAAa,SAGV,0BAAMA,UAAWA,GAAjB,wBAAkDiC,EAAWE,QAAQ,GAArE,qBAA2FD,EAASC,QAAQ,IAiB9EC,IACjC,yBAAKpC,UAAU,YACX,yBAAKA,UAAU,SAASsB,QA9DF,WAC9B7C,EAAQsB,aAAa6B,EAASvC,SAAUuC,EAASrD,OAAQ,mBA6DjD,2BAGA,yBAAKyB,UAAU,SACX,yBAAKA,UAAU,SAAUsB,QA9DT,WAC5B7C,EAAQ4D,cAAcT,EAASvC,YA6DnB,0BAGA,yBAAKW,UAAU,SAAUsB,QA7DX,WAC1B7C,EAAQ4D,cAAcT,EAASrD,UA4DnB,yBAIJ,yBAAKyB,UAAU,SAAUsB,QAvDW,WAC5C,IAAMgB,EAAcC,KAAKC,MAAMD,KAAKE,UAAUb,IAC9CU,EAAYjD,SAAW2C,IACvBD,EAAkBO,OAAaI,EAAW,gCAoDlC,4CAGA,yBAAK1C,UAAU,SACX,yBAAKA,UAAU,SAAUsB,QAjEE,WACvC,IAAMgB,EAAcC,KAAKC,MAAMD,KAAKE,UAAUb,IAC9CU,EAAYjD,SAAWsD,WAAWb,EAAmBK,QAAQ,IAC7DJ,EAAkBO,OAAaI,EAAW,gCA8D9B,gCAGA,yBAAK1C,UAAU,SAAUsB,QAxDA,WACrC,IAAMgB,EAAcC,KAAKC,MAAMD,KAAKE,UAAUb,IAC9CU,EAAY/D,OAASoE,WAAWb,EAAmBK,QAAQ,IAC3DJ,EAAkBO,OAAaI,EAAW,8BAqD9B,+BAIFd,EAASvC,SAAWyC,GAAsBF,EAASrD,OAASuD,EAE1D,yBAAK9B,UAAU,SAASsB,QAxCZ,WACxB,IAAMgB,EAAcC,KAAKC,MAAMD,KAAKE,UAAUb,IACxCgB,EAAShB,EAASrD,OACxB+D,EAAY/D,OAASoE,WAAWb,EAAmBK,QAAQ,IAC3DJ,EAAkBO,EAAaC,KAAKC,MAAMD,KAAKE,UAAU,CACrDpD,SAAUiD,EAAY/D,OACtBA,OAAQqE,EACRC,MAAOP,EAAYO,SAClB,oBAgCO,qBACuB1B,YAAaW,IAEnC,M,MC/BNgB,MA3Df,YAA0E,IAArDC,EAAoD,EAApDA,UAAWC,EAAyC,EAAzCA,mBAAoBC,EAAqB,EAArBA,mBAAqB,EACjBC,oBAAU,GADO,mBAChEC,EADgE,KAC3CC,EAD2C,OAEXF,oBAAU,GAFC,mBAEhEG,EAFgE,KAExCC,EAFwC,KAG/DC,EAAyBC,iBAAO,MAEhCC,EAAsB,SAAC5B,EAAaD,GACtCwB,EAAuBvB,GACvB1C,QAAQC,IAAIwC,GACZoB,EAAmBnB,EAAaD,IA4BpC,OAzBA8B,qBAAU,WACFH,EAAuBzE,SAAWuE,GAA0B,IAC5DE,EAAuBzE,QAAQ6E,iBAC/BL,GAA2B,OAuB/B,yBAAKtD,UAAU,aACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,YAAYsB,QArBR,WAC3B,IAAMsC,EAAerB,KAAKC,MAAMD,KAAKE,UAAUM,IAC3Ca,EAAaC,OAAS,EACtBD,EAAaE,KAAK,CACdzE,SAAU0D,EAAUA,EAAUc,OAAO,GAAGtF,OACxCA,OAAQwE,EAAUA,EAAUc,OAAO,GAAGtF,OAAS,KAGnDqF,EAAaE,KAAK,CACdzE,SAAU,EACVd,OAAQ,KAGhB0E,EAAmBW,EAAc,gBACjCN,EAA0BM,EAAaC,OAAS,GAChDJ,EAAoBG,EAAaC,OAAS,EAAGD,EAAaA,EAAaC,OAAO,KAMXjE,KAAK,OAAhE,gBAICmD,EAAU3B,KAAI,WAAuB2C,GAAvB,IAAG1E,EAAH,EAAGA,SAAUd,EAAb,EAAaA,OAAb,OACX,yBACIyB,UAAS,iBACLmD,IAAwBY,EAAM,SAAW,IAE7CA,IAAKA,EACLzC,QAASmC,EAAoB7D,KAAK,KAAMmE,EAAKhB,EAAUgB,IACvD9D,IAAM8D,GAAOV,EAA0BE,EAAyB,MANpE,YAQcQ,EAAI,EARlB,KAQuB5C,YAAa9B,GARpC,MAQkD8B,YAAa5C,U,YCwEpEyF,MA7Hf,YAAoF,IAAD,OAA7DC,EAA6D,EAA7DA,MAAOC,EAAsD,EAAtDA,OAAQ9D,EAA8C,EAA9CA,MAAO+D,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,eAAgBC,EAAgB,EAAhBA,aAAgB,EAEvDnB,mBAAS,MAF8C,mBAE1EoB,EAF0E,KAEnEC,EAFmE,OAG3CrB,oBAAS,GAHkC,mBAG1EsB,EAH0E,KAG7DC,EAH6D,OAI3CvB,oBAAS,GAJkC,mBAI1EwB,EAJ0E,KAI7DC,EAJ6D,OAK7CzB,mBAAS,GALoC,mBAK1E0B,EAL0E,KAK9DC,EAL8D,OAM7C3B,mBAAS,GANoC,mBAM1E4B,EAN0E,KAM9DC,EAN8D,OAOrC7B,mBAAS,GAP4B,mBAO1E8B,EAP0E,KAO1DC,EAP0D,OAQnC/B,mBAAS,GAR0B,mBAQ1EgC,EAR0E,KAQzDC,EARyD,OASnCjC,oBAAU,GATyB,mBAS1EkC,EAT0E,KASzDC,EATyD,KAU3EC,EAAY9B,iBAAO,MAElBc,KACDA,EAAQ,IAAIiB,OACNC,IAAItB,EACVI,EAAMmB,OAAS,WACXhB,GAAe,IAEnBF,EAASD,IAGb,IAAIoB,EAAwC,EAARtF,EAAckE,EAAMlE,MAEpDC,EAAS,IACPsF,EAAS,WACX,GAAIL,GAAaA,EAAUxG,SAAWwF,GAASA,EAAMlE,OAASkE,EAAMjE,QAAUmE,EAAa,CACvF,IAAIoB,EAAUN,EAAUxG,QAAQ+G,WAAW,MAC3CxF,EAASyF,SAASxB,EAAMjE,OAASqF,GACjCE,EAAQG,UAAUzB,EAAO,EAAG,EAAGA,EAAMlE,MAAOkE,EAAMjE,OAAQ,EAAG,EAAGD,EAAOC,GAEvE8D,EAAM6B,SAAQ,SAACC,EAAGC,GACdN,EAAQO,UAAYD,GAAOd,EAAkB,uBAAyB,yBACtEQ,EAAQQ,SAASH,EAAEI,EAAEX,EAA8BO,EAAEK,EAAEZ,EAA8BO,EAAE7F,MAAMsF,EAA8BO,EAAE5F,OAAOqF,MAGpIhB,IACAkB,EAAQO,UAAY,uBACpBP,EAAQQ,SAASxB,EAAYE,EAAYE,EAAgBE,MAMrE,SAASqB,EAAkBC,EAAQC,GAC/B,IAAMC,EAAOF,EAAOG,wBAGpB,MAAO,CAFGF,EAAMG,QAAUF,EAAKG,KACrBJ,EAAMK,QAAUJ,EAAKK,KAqDnC,OA1DApB,IAsDAjC,qBAAU,WACNiC,OAIA,yBAAK3F,UAAU,cACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,SAASiE,GACxB,4BAAQ7D,MAAOA,EAAOC,OAAQA,EAAQJ,IAAKqF,EAAW0B,YArD1C,SAACC,GAAO,IAAD,EACdV,EAAkBjB,EAAUxG,QAASmI,GADvB,mBACtBZ,EADsB,KACnBC,EADmB,KAEvB5B,IACAO,EAAkBoB,EAAIzB,GACtBO,EAAmBmB,EAAIxB,KAiDiEoC,WAxBzE,SAACD,GACpBtC,GAAe,IAuByGwC,YA7CpG,SAACF,GAAO,IAAD,EACdV,EAAkBjB,EAAUxG,QAASmI,GADvB,mBACtBZ,EADsB,KACnBC,EADmB,KAE3B3B,GAAe,GACfE,EAAcwB,GACdtB,EAAcuB,GACdnB,EAAmB,GACnBF,EAAkB,IAuCoImC,UApCpI,SAACH,GACf5G,EAAS,IAAMD,EAAQ,IACvBgE,EAAe,CACXiC,EAAGP,SAASlB,EAAac,GACzBY,EAAGR,SAAShB,EAAaY,GACzBtF,MAAO0F,SAASd,EAAiBU,GACjCrF,OAAQyF,SAASZ,EAAkBQ,KAG3Cf,GAAe,OA8BX,yBAAK3E,UAAU,YACVmE,EAAM/C,KAAI,SAACiG,EAAMnB,GACd,OACI,yBAAKlG,UAAU,OACNsH,YAAc,WA1BvCjC,EA0BiEa,IAAMtG,KAAK,GACnDsH,WAAa,WAvBtC7B,GAAoB,IAuBiDzF,KAAK,IAElD,yBAAK0B,QAAS,WArBtC+C,EAqByD6B,KAAjC,QACUA,EAAI,EACV,yBAAKV,IAAI,uEAAuEpF,MAAO,a,MChE5GmH,MAlDf,YAAyH,IAAD,OAA/F1E,EAA+F,EAA/FA,MAAO2E,EAAwF,EAAxFA,cAAeC,EAAyE,EAAzEA,kBAAmBC,EAAsD,EAAtDA,uBAAwBC,EAA8B,EAA9BA,2BA4BtF,OAAO,yBAAK3H,UAAU,iBACjB6C,EAAMzB,KAAI,SAACwG,EAAG1B,GACX,OAAO,6BACH,2BAAO2B,KAAK,WAAWC,QAAUN,EAAcO,QAAQH,EAAEI,KAAQ,EAAkBC,SAAW,SAAChB,GAAD,OA9BnF,SAACA,EAAGiB,GACvB,IAAIC,EAAmB5F,KAAKC,MAAMD,KAAKE,UAAU+E,IAC3CY,EAAOvF,EAAMqF,GACfjB,EAAEoB,OAAOP,QACTK,EAAiBrE,KAAKsE,EAAKJ,IAE3BG,EAAmBA,EAAiBG,QAAO,SAAAC,GAAE,OAAIA,GAAMH,EAAKJ,MAEhEN,EAAuBS,EAAkB,kCAsBoEK,CAAevB,EAAGf,IAAMtG,KAAK,KAD/H,UACgJsG,EAAM,MAIhKrD,EAAMzB,KAAI,SAACwG,EAAG1B,GACX,OAAQsB,EAAcO,QAAQH,EAAEI,KAAO,EAC/B,yBAAKhI,UAAU,QACX,kBAAC,EAAD,CACIiE,MAAK,gBAAWiC,EAAI,GACpBhC,OAAQ0D,EAAE1H,IAAKE,MAAS,IAAK+D,MAAOsD,EAAkBG,EAAEI,KAAO,GAC/D5D,eAAiB,SAACiD,GAAD,OA7BZ,SAACoB,EAAQC,GAClC,IAAMC,EAAuBpG,KAAKC,MAAMD,KAAKE,UAAUgF,IAClDkB,EAAqBF,GAGtBE,EAAqBF,GAAQ3E,KAAK4E,GAFlCC,EAAqBF,GAAU,CAACC,GAIpCf,EAA2BgB,EAAsB,mBAsBFC,CAAqBhB,EAAEI,GAAIX,IAAOzH,KAAK,GAClEyE,aAAe,SAACwE,GAAD,OApBZ,SAACJ,EAAQI,GAChC,IAAMF,EAAuBpG,KAAKC,MAAMD,KAAKE,UAAUgF,IACvDkB,EAAqBF,GAAQK,OAAOD,EAAS,GAC7ClB,EAA2BgB,EAAsB,qBAiBDI,CAAmBnB,EAAEI,GAAIa,IAAUjJ,KAAK,MAG1E,Q,MCqDPoJ,MA7Ff,YAAgE,IAA9CjG,EAA6C,EAA7CA,UAAWF,EAAkC,EAAlCA,MAAO1C,EAA2B,EAA3BA,SAAU8I,EAAiB,EAAjBA,cAAiB,EACT/F,oBAAU,GADD,mBACtDgG,EADsD,KAClCC,EADkC,OAEPjG,mBAAS,GAFF,mBAEpDpB,EAFoD,KAEhCsH,EAFgC,KAIrD3K,EAAU+E,iBAAO,MAoDvB,OAlDI0F,GAAsBnG,EAAUc,SAChCqF,GAAsB,EACtBC,GAAuB,IAiDnB,yBAAKnJ,UAAU,UACX,6BACI,kBAAC,EAAD,CAAsBG,SAAUA,EAAUjB,iBAvCjC,SAACF,GACtBoK,EAAsBzG,WAAW3D,EAAcmD,QAAQ,MAsCmClC,IAAKxB,IAElFyK,GAAsB,EAEnB,6BACI,kBAAC,EAAD,CACIzK,QAASA,EAAQK,QACjB8C,SAAUmB,EAAUmG,GACpBrH,YAAaqH,EACbnH,kBA5CF,SAACsH,EAAiB/G,EAAagH,GACrD,IAAM1F,EAAerB,KAAKC,MAAMD,KAAKE,UAAUM,IAC/Ca,EAAasF,GAAsBG,EAC/B/G,GACAsB,EAAakF,OAAOI,EAAqB,EAAG,EAAG5G,GAEnD2G,EAAc,CAAElG,UAAWa,EAAcf,QAAO1C,YAAYmJ,IAuCpCxH,mBAAoBA,EACpBE,sBArBE,WAC1B,OAA0B,GAAtBkH,EACO,EAEJnG,EAAUmG,EAAmB,GAAG3K,UAmBnB,kBAAC,EAAD,CACIsE,MAAOA,GAAS,GAChB2E,cAAezE,EAAUmG,GAAoBrG,OAAS,GACtD4E,kBAAmB1E,EAAUmG,GAAoBK,WAAa,GAC9D7B,uBAvCG,SAAC8B,EAA8BF,GAC1D,IAAM1F,EAAerB,KAAKC,MAAMD,KAAKE,UAAUM,IAC/Ca,EAAasF,GAAoBrG,MAAQ2G,EACzCP,EAAc,CAAElG,UAAWa,EAAcf,QAAO1C,YAAYmJ,IAqCpC3B,2BAlCO,SAAC8B,EAA0BH,GAC1D,IAAM1F,EAAerB,KAAKC,MAAMD,KAAKE,UAAUM,IAC/Ca,EAAasF,GAAoBK,UAAYE,EAC7CR,EAAc,CAAElG,UAAWa,EAAcf,QAAO1C,YAAYmJ,OAkC1C,IAKV,kBAAC,EAAD,CAAWvG,UAAWA,EAAWC,mBA1Ed,SAACnB,EAAaD,GACzCuH,EAAsBtH,GACtBpD,EAAQK,QAAQuD,cAAcT,EAASvC,WAwE8C4D,mBApD9D,SAACW,EAAc0F,GACtCL,EAAc,CAAElG,UAAWa,EAAcf,QAAO1C,YAAYmJ,Q,YCpCrD,SAASI,EAAT,GAA2E,IAA7CC,EAA4C,EAA5CA,0BAA2BC,EAAiB,EAAjBA,eAAiB,EACrD1G,mBAAS,IAD4C,mBAC9E2G,EAD8E,KACpEC,EADoE,OAEzD5G,mBAAS,IAFgD,mBAE9E6G,EAF8E,KAEtEC,EAFsE,OAGrD9G,mBAAS,IAH4C,mBAG9E/C,EAH8E,KAGpE8J,EAHoE,OAI3D/G,mBAAS,IAJkD,mBAI9EL,EAJ8E,KAIvEqH,EAJuE,KAM/EC,EAAiB,SAACJ,GACpBC,EAAUD,IAwCd,OAAO,2BAAO/J,UAAU,sBAAqB,+BAAO,4BAC5C,wBAAIA,UAAU,WAAWsB,QAAS6I,EAAevK,KAAKhB,KApDnD,QAqDC,2BAAOiJ,KAAK,QAAQuC,KAAK,YAAYnC,SAAUkC,EAAevK,KAAKhB,KArDpE,OAqDmFkJ,QArDnF,OAqD4FiC,IAD/F,cAIA,wBAAI/J,UAAU,aACV,yCAGA,2BACI,2BAAO6H,KAAK,OAAOI,SA3CH,SAAChB,GAC7BgD,EAAYhD,EAAEoB,OAAOgC,QA0C6CA,MAAOlK,EAAUmK,SA7D5E,OA6DsFP,KAErF,oEAGA,2BACI,8BAAU9B,SA7CG,SAAChB,GAC1BiD,EAASjD,EAAEoB,OAAOgC,QA4CoCA,MAAOxH,EAAQyH,SAnE9D,OAmEwEP,OAG1E,4BACD,wBAAI/J,UAAU,WAAWsB,QAAS6I,EAAevK,KAAKhB,KAtE9C,YAuEJ,2BAAOiJ,KAAK,QAAQuC,KAAK,YAAYnC,SAAUkC,EAAevK,KAAKhB,KAvE/D,WAuEmFkJ,QAvEnF,WAuE4FiC,IADpG,YAIA,wBAAI/J,UAAU,aACV,iEAGA,2BACI,8BAAUiI,SAlEI,SAAChB,GAC3B6C,EAAY7C,EAAEoB,OAAOgC,QAiEkCA,MAAOR,EAAUS,SA/E5D,WA+EsEP,OAG5EJ,EACA,4BACE,wBAAI3J,UAAU,WAAWsB,QAAS6I,EAAevK,KAAKhB,KAnFnD,YAoFC,2BAAOiJ,KAAK,QAAQuC,KAAK,YAAYnC,SAAUkC,EAAevK,KAAKhB,KApFpE,WAoFuFkJ,QApFvF,WAoFgGiC,IADnG,8BAIA,wBAAI/J,UAAU,aACV,uBAAGuK,KAAMhI,KAAKC,MAAMmH,GAA2BxJ,SAAUkI,OAAO,UAAU9F,KAAKC,MAAMmH,GAA2BxJ,YAGtH,GACJ4J,EAAS,4BACP,wBAAI/J,UAAU,WACV,4BAAQsB,QAtEG,WACnB,OAAQyI,GACJ,IA3BQ,UA6BJ,YADAH,EAAerH,KAAKC,MAAMqH,IAE9B,IA7BO,UA+BH,YADAD,EAAerH,KAAKC,MAAMmH,IAE9B,IAlCG,MA2CC,YARAC,EAAe,CACXzJ,WACA4C,UAAW,GACXF,MAAOA,EAAM2H,OAAOC,MAAM,MAAMrJ,KAAI,SAAAwG,GAAC,OAAIA,EAAE4C,UAAQlC,QAAO,SAAAV,GAAC,OAAIA,KAAGxG,KAAI,SAAAsJ,GAAO,MAAK,CAC9ExK,IAAKwK,EACL1C,GAAI,IAAM,IAAI2C,MAAOC,UAAarL,KAAKsL,eAMnD,QACIC,MAAM,UAiDN,WAEJ,wBAAI9K,UAAU,aACV,KCfD+K,MA/Ef,SAAsBC,GAAc,IAAD,EACT9H,mBAAS+H,YAA2BD,IAD3B,mBAC1BE,EAD0B,KACpBC,EADoB,OAEHjI,mBAAS,IAFN,mBAE1BkI,EAF0B,KAEjBC,EAFiB,OAGTnI,mBAAS,IAHA,mBAG1BoI,EAH0B,KAGpBC,EAHoB,KAIzBC,EAAchI,iBAAO,MAErBiI,EAAY,SAACC,GACfP,EAAQO,GACRC,OAAOC,aAAaC,QAVF,sBAU6BtJ,KAAKE,UAAUqJ,YAAyBJ,MA6C3F,OAAO,6BAAMR,EAAK/K,SACV,yBAAKH,UAAU,gBACX,kBAAC,EAAD,iBAAYkL,EAAZ,CAAkBjC,cA3CF,SAACyC,EAASK,GAClC,IAAMC,EAAe,CAACC,QAAS1J,KAAKC,MAAMD,KAAKE,UAAUyI,IAAQQ,QAASnJ,KAAKC,MAAMD,KAAKE,UAAUiJ,IAAWK,iBAC/GN,EAAUC,GAEVN,EAAQtH,KAAKkI,GACbX,EAAWD,GAGXG,EADAD,EAAO,QAqCC,8BAAUhB,UAAU,EAAMD,MAAO9H,KAAKE,UAAUqJ,YAAyBZ,GAAO,KAAM,GAC5EjL,IAAKuL,IACf,yBAAKxL,UAAU,aAAasB,QA/BhB,WACpBkK,EAAY1M,QAAQoN,SACpBC,SAASC,YAAY,QACrBtB,MAAM,aA4BE,QACCM,EAAQvH,OAAS,EACZ,gDACmBuH,EAAQA,EAAQvH,OAAS,GAAGkI,cAD/C,IAC8D,0BAAM/L,UAAU,aACVsB,QA7BnE,WACf,IAAM+K,EAAWjB,EAAQkB,MACzBb,EAAUY,EAASJ,SAEnBZ,EAAWD,GAEXE,EAAKxH,KAAKuI,GACVd,EAAQD,KAqBoE,SAG9D,GAELA,EAAKzH,OAAS,EACT,qDACwByH,EAAKA,EAAKzH,OAAS,GAAGkI,cAD9C,IAC6D,0BAAM/L,UAAU,aACVsB,QA1BlE,WACf,IAAMiL,EAAWjB,EAAKgB,MACtBb,EAAUc,EAASb,SAEnBN,EAAQtH,KAAKyI,GACblB,EAAWD,GAEXG,EAAQD,KAkBmE,SAG7D,IAIV,kBAAC,EAAD,CAAoB3B,0BAA2BgC,OAAOC,aAAaY,QA7ErD,uBA6EiF5C,eApD1E,SAAC6C,GAC1BhB,EAAUR,YAA2BwB,S,QC1B7CC,aAAoB,SAACC,EAAUzB,GAAU,IAE9BnI,EAA0CmI,EAA1CnI,UAAWF,EAA+BqI,EAA/BrI,MAAO1C,EAAwB+K,EAAxB/K,SAAwB+K,EAAd0B,WAEnCC,IAASlH,OACL,kBAAC,IAAMmH,WAAP,KACE,kBAAC,EAAD,CAAc/J,UAAWA,GAAa,GAAIF,MAAOA,GAAS,GAAI1C,SAAUA,KAE1EwM,Q","file":"static/js/main.5d7a75fe.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport ReactPlayer from 'react-player';\n\nimport { secsToString } from 'emptybars-common/utils'\n\nimport './PlayerWithNavButtons.scss';\n\nclass PlayerWithNavButtons extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            progress: -1,\n            duration: -1,\n            gotoAfterStopSec: -1,\n            endSec: -1,\n            playing: true,\n        };\n        this.$player = React.createRef();\n    }\n\n    handleDuration(duration) {\n        this.setState({duration: duration});\n    }\n\n    stopAndReturn() {\n        const gotoAfterStopSec = this.state.gotoAfterStopSec;\n        this.setState({\n            endSec: -1,\n            gotoAfterStopSec: -1,\n            playing: false\n        });\n        this.$player.current.seekTo(gotoAfterStopSec, 'seconds');\n    }\n\n    handleProgress({ playedSeconds }) {\n        if (this.state.endSec > 0 && playedSeconds > this.state.endSec) {\n            this.stopAndReturn();\n        }\n        this.setState({progress: playedSeconds});\n        this.props.onProgressUpdate(playedSeconds);\n    };\n\n    handleOnPlay() {\n        this.setState({playing: true});\n    }\n\n    handleOnReady() {\n        console.log('ready!');\n    }\n\n    handleStop() {\n        this.setState({playing: false});\n    }\n\n    playFragment(startSec, endSec, mode) {\n        this.$player.current.seekTo(startSec, 'seconds');\n        this.setState({\n            // TODO: remove magic strings\n            gotoAfterStopSec: Math.max(mode === 'STAY_AT_END' ? endSec : startSec, 0),\n            endSec: Math.max(endSec, 0.01),\n            playing: true\n        });\n    }\n\n    seekTo(pos) {\n        this.$player.current.seekTo(pos, 'seconds');\n    }\n\n    seekToAndStop(pos) {\n        this.setState({\n            playing: false\n        });\n        this.$player.current.seekTo(pos, 'seconds');\n    }\n\n    maybeStop1SecPlaying(callback) {\n        if (this.state.playing && this.state.gotoAfterStopSec > 0) {\n            this.stopAndReturn();\n            // We need timeout to give player time to stop and update progress\n            setTimeout(callback.bind(this), 100);\n        } else {\n            callback();\n        }\n    }\n\n    onMoveToClick(shift) {\n        this.maybeStop1SecPlaying(() => {\n            this.$player.current.seekTo(Math.max(this.state.progress + shift, 0), 'seconds');\n        });\n    };\n\n\n    handlePlayOneSecBefore() {\n        this.maybeStop1SecPlaying(() => {\n            this.playFragment(this.state.progress - 1, this.state.progress, 'STAY_AT_END');\n        });\n    }\n\n    handlePlayOneSecAfter() {\n        this.maybeStop1SecPlaying(() => {\n            this.playFragment(this.state.progress, this.state.progress + 1, 'STAY_AT_START');\n        });\n    }\n\n    render() {\n            const moveTo = [-5, -1, -0.5, -0.1, 0.1, 0.5, 1, 5];\n\n            return (\n                <div className='playWithNavButtons'>\n                    <ReactPlayer\n                        ref={this.$player}\n                        url={this.props.videoUrl}\n                        width='100%'\n                        height='100%'\n                        onDuration={this.handleDuration.bind(this)}\n                        onProgress={this.handleProgress.bind(this)}\n                        onPlay={this.handleOnPlay.bind(this)}\n                        onReady={this.handleOnReady.bind(this)}\n                        progressInterval={100}\n                        onPause={this.handleStop.bind(this)}\n                        onEnded={this.handleStop.bind(this)}\n                        playing={this.state.playing}\n                        controls={true}\n                    />\n                    <div className='positionAndControls'>\n                        Current position: <span className='position'>{secsToString(this.state.progress)}</span>\n                        <div className='controls'>\n                            {\n                                moveTo.map(item => <div className='gotoButton' onClick={(() => this.onMoveToClick(item)).bind(this)}>{item > 0 ? '+' + item : item}</div>)\n                            }\n                            <div className='gotoButton' onClick={this.handlePlayOneSecBefore.bind(this)} >Play 1 sec before</div>\n                            <div className='gotoButton' onClick={this.handlePlayOneSecAfter.bind(this)} >Play 1 sec after</div>\n                        </div>\n                    </div>\n                </div>\n            );\n    }\n}\n\nexport default PlayerWithNavButtons;","import React from 'react';\nimport { secsToString } from \"emptybars-common/utils\";\n\nimport './FragmentPosition.scss';\n\nfunction FragmentPosition({ $player, fragment, fragmentIdx, videoPlayerPosSecs, onFragmentChanged, getPrevFragmentEndSec}) {\n    const handlePlayCurrentFragment = () => {\n        $player.playFragment(fragment.startSec, fragment.endSec, 'STAY_AT_START');\n    }\n\n    const handleJumpFragmentStart = () => {\n        $player.seekToAndStop(fragment.startSec);\n    }\n\n    const handleJumpFragmentEnd = () => {\n        $player.seekToAndStop(fragment.endSec);\n    }\n\n    const hanleSetCurrentTimeAsFragmentStart = () => {\n        const newFragment = JSON.parse(JSON.stringify(fragment));\n        newFragment.startSec = parseFloat(videoPlayerPosSecs.toFixed(1));\n        onFragmentChanged(newFragment, undefined, \"update fragment start time\");\n    }\n\n    const handleSetFragmentStartToLastFragmentEnd = () => {\n        const newFragment = JSON.parse(JSON.stringify(fragment));\n        newFragment.startSec = getPrevFragmentEndSec();\n        onFragmentChanged(newFragment, undefined, \"update fragment start time\");\n    }\n\n    const hanleSetCurrentTimeAsFragmentEnd = () => {\n        const newFragment = JSON.parse(JSON.stringify(fragment));\n        newFragment.endSec = parseFloat(videoPlayerPosSecs.toFixed(1));\n        onFragmentChanged(newFragment, undefined, 'update fragment end time');\n    }\n\n    const renderFragmentPos = () => {\n        const deltaStart = (videoPlayerPosSecs - fragment.startSec);\n        const deltaEnd = (videoPlayerPosSecs - fragment.endSec);\n\n        var className;\n        if (deltaStart >= 0 && deltaEnd <= 0) {\n            className = 'inside';\n        } else if (deltaStart < 0) {\n            className = 'before';\n        } else if (deltaEnd > 0) {\n            className =  'after';\n        }\n\n        return <span className={className}>Fragment start delta={deltaStart.toFixed(1)}, delta end delta={deltaEnd.toFixed(1)}</span>;\n    }\n\n    const handleSplitFragment = () => {\n        const newFragment = JSON.parse(JSON.stringify(fragment));\n        const oldVal = fragment.endSec;\n        newFragment.endSec = parseFloat(videoPlayerPosSecs.toFixed(1));\n        onFragmentChanged(newFragment, JSON.parse(JSON.stringify({\n            startSec: newFragment.endSec,\n            endSec: oldVal,\n            pages: newFragment.pages\n        })), 'split fragment');\n    }\n\n    return (\n        <div className='fragmentPosition'>\n            <div className='title'>Selected Fragment #{fragmentIdx + 1} ({secsToString(fragment.startSec)} - {secsToString(fragment.endSec)})</div>\n            <div className='playerPosition'>{renderFragmentPos()}</div>\n            <div className='controls'>\n                <div className='button' onClick={handlePlayCurrentFragment}>\n                    Play the whole fragment\n                </div>\n                <div className='group'>\n                    <div className='button'  onClick={handleJumpFragmentStart}>\n                        Jump to fragment start\n                    </div>\n                    <div className='button'  onClick={handleJumpFragmentEnd}>\n                        Jump to fragment end\n                    </div>\n                </div>\n                <div className='button'  onClick={handleSetFragmentStartToLastFragmentEnd}>\n                    Set fragment start at prev. fragment end\n                </div>\n                <div className='group'>\n                    <div className='button'  onClick={hanleSetCurrentTimeAsFragmentStart}>\n                        Set as fragment's start time\n                    </div>\n                    <div className='button'  onClick={hanleSetCurrentTimeAsFragmentEnd}>\n                        Set as fragment's end time\n                    </div>\n                </div>\n                {(fragment.startSec < videoPlayerPosSecs && fragment.endSec > videoPlayerPosSecs)\n                    ?\n                    <div className='button' onClick={handleSplitFragment}>\n                        Split fragment at {secsToString(videoPlayerPosSecs)}\n                    </div>\n                    :'' }\n            </div>\n        </div>\n    );\n}\n\nexport default FragmentPosition;","import React, {useState, useRef, useEffect} from 'react';\nimport { secsToString } from \"emptybars-common/utils\";\n\nimport './Fragments.scss';\n\nfunction Fragments({ fragments, onFragmentSelected, onFragmentsChanged}) {\n    var [selectedFragmentIdx, setSelectedFragmentIdx] = useState(-1);\n    var [lastCreatedFragmentIdx, setLastCreatedFragmentIdx] = useState(-1);\n    const lastCreatedFragmentRef = useRef(null);\n\n    const handleClickFragment = (fragmentIdx, fragment) => {\n        setSelectedFragmentIdx(fragmentIdx);\n        console.log(fragment);\n        onFragmentSelected(fragmentIdx, fragment);\n    };\n\n    useEffect(() => {\n        if (lastCreatedFragmentRef.current && lastCreatedFragmentIdx >= 0) {\n            lastCreatedFragmentRef.current.scrollIntoView();\n            setLastCreatedFragmentIdx(-1);\n        }\n    });\n\n    const handleAddFragmentClick = () => {\n        const newFragments = JSON.parse(JSON.stringify(fragments));\n        if (newFragments.length > 0) {\n            newFragments.push({\n                startSec: fragments[fragments.length-1].endSec,\n                endSec: fragments[fragments.length-1].endSec + 10\n            });\n        } else {\n            newFragments.push({\n                startSec: 0,\n                endSec: 10\n            });\n        }\n        onFragmentsChanged(newFragments, \"add fragment\");\n        setLastCreatedFragmentIdx(newFragments.length - 1);\n        handleClickFragment(newFragments.length - 1, newFragments[newFragments.length-1]);\n    }\n\n    return (\n        <div className='fragments'>\n            <div className='scrolling'>\n                <div className='addButton' onClick={handleAddFragmentClick.bind(null)}>\n                    Add fragment\n                </div>\n\n                {fragments.map(({ startSec, endSec }, key) => (\n                    <div\n                        className={`button ${\n                            selectedFragmentIdx === key ? 'active' : ''\n                        }`}\n                        key={key}\n                        onClick={handleClickFragment.bind(null, key, fragments[key])}\n                        ref={(key == lastCreatedFragmentIdx) ? lastCreatedFragmentRef : null}\n                    >\n                        Fragment {key+1}: {secsToString(startSec)} - {secsToString(endSec)}\n                    </div>\n                ))}\n            </div>\n         </div>);\n}\n\nexport default Fragments;\n","import React, { useState, useRef, useEffect } from 'react';\n\nimport './ImageAreas.scss';\n\nfunction ImageAreas({ title, imgUrl, width, areas, onNewAreaAdded, onDeleteArea }) {\n    // var [height, setHeight] = useState(100);\n    var [image, setImage] = useState(null);\n    var [imageLoaded, setImageLoaded] = useState(false);\n    var [isMouseDown, setIsMouseDown] = useState(false);\n    var [selectionX, setSelectionX] = useState(0);\n    var [selectionY, setSelectionY] = useState(0);\n    var [selectionWidth, setSelectionWidth] = useState(0);\n    var [selectionHeight, setSelectionHeight] = useState(0);\n    var [highlightedArea, setHighlightedArea] = useState(-1);\n    var canvasRef = useRef(null);\n\n    if (!image) {\n        image = new Image();\n        image.src=imgUrl;\n        image.onload = () => {\n            setImageLoaded(true);\n        }\n        setImage(image);\n    }\n\n    var coeffOrigImageToScreenCoords = (width * 1.0 / image.width);\n\n    var height = 100;\n    const render = () => {\n        if (canvasRef && canvasRef.current && image && image.width && image.height && imageLoaded) {\n            var context = canvasRef.current.getContext(\"2d\");\n            height = parseInt(image.height * coeffOrigImageToScreenCoords);\n            context.drawImage(image, 0, 0, image.width, image.height, 0, 0, width, height);\n\n            areas.forEach((a, idx) => {\n                context.fillStyle = idx == highlightedArea ? 'rgba(255, 0, 0, 0.7)' : 'rgba(255, 255, 0, 0.5)';\n                context.fillRect(a.x*coeffOrigImageToScreenCoords, a.y*coeffOrigImageToScreenCoords, a.width*coeffOrigImageToScreenCoords, a.height*coeffOrigImageToScreenCoords);\n            });\n\n            if (isMouseDown) {\n                context.fillStyle = 'rgba(255, 0, 0, 0.5)';\n                context.fillRect(selectionX, selectionY, selectionWidth, selectionHeight);\n            }\n        }\n    };\n    render();\n\n    function getCursorPosition(canvas, event) {\n        const rect = canvas.getBoundingClientRect()\n        const x = event.clientX - rect.left\n        const y = event.clientY - rect.top\n        return [x, y]\n    }\n\n    const handleMouseMove = (e) => {\n        var [x, y] = getCursorPosition(canvasRef.current, e);\n        if (isMouseDown) {\n            setSelectionWidth(x - selectionX);\n            setSelectionHeight(y - selectionY);\n        }\n    }\n\n    const handleMouseDown = (e) => {\n        var [x, y] = getCursorPosition(canvasRef.current, e);\n        setIsMouseDown(true);\n        setSelectionX(x);\n        setSelectionY(y);\n        setSelectionHeight(0);\n        setSelectionWidth(0);\n    }\n\n    const handleMouseUp = (e) => {\n        if (height > 10 && width > 10) {\n            onNewAreaAdded({\n                x: parseInt(selectionX / coeffOrigImageToScreenCoords),\n                y: parseInt(selectionY / coeffOrigImageToScreenCoords),\n                width: parseInt(selectionWidth / coeffOrigImageToScreenCoords),\n                height: parseInt(selectionHeight / coeffOrigImageToScreenCoords)\n            })\n        }\n        setIsMouseDown(false);\n    }\n\n    const handleMouseOut = (e) => {\n        setIsMouseDown(false);\n    }\n\n    const handleMouseOverArea = (areaIdx) => {\n        setHighlightedArea(areaIdx);\n    }\n\n    const handleMouseOutArea = (areaIdx) => {\n        setHighlightedArea(-1);\n    }\n\n    const handleDelete = (areaIdx) => {\n        onDeleteArea(areaIdx);\n    }\n\n    useEffect(() => {\n        render();\n    });\n\n    return (\n        <div className='imageAreas'>\n            <div className='canvas'>\n                <div className='title'>{title}</div>\n                <canvas width={width} height={height} ref={canvasRef} onMouseMove={handleMouseMove} onMouseOut={handleMouseOut} onMouseDown={handleMouseDown} onMouseUp={handleMouseUp}>\n                </canvas>\n            </div>\n            <div className='controls'>\n                {areas.map((area, idx) => {\n                    return (\n                        <div className='item'\n                                 onMouseOver={(() => handleMouseOverArea(idx)).bind(this)}\n                                 onMouseOut={(() => handleMouseOutArea(idx)).bind(this)}\n                                >\n                                <div onClick={() => handleDelete(idx)}>\n                                    Area {idx+1}\n                                    <img src='https://github.com/stillwaiting/emptybars/raw/main/Delete-Button.png' width={16} />\n                                </div>\n                        </div>)\n                })}\n            </div>\n\n        </div>\n    );\n}\n\nexport default ImageAreas;","import React from 'react';\nimport ImageAreas from \"./ImageAreas\";\n\nimport './FragmentPages.scss';\n\nfunction FragmentPages({ pages, fragmentPages, fragmentPageAreas, onFragmentPagesChanges, onFragmentPageAreasChanged }) {\n    const handleOnChange = (e, pageIdx) => {\n        var newFragmentPages = JSON.parse(JSON.stringify(fragmentPages));\n        const page = pages[pageIdx];\n        if (e.target.checked) {\n            newFragmentPages.push(page.id);\n        } else {\n            newFragmentPages = newFragmentPages.filter(it => it != page.id);\n        }\n        onFragmentPagesChanges(newFragmentPages, 'list of fragment pages updated');\n    }\n\n    const handleOnNewAreaAdded = (pageId, newArea) => {\n        const newFragmentPageAreas = JSON.parse(JSON.stringify(fragmentPageAreas));\n        if (!newFragmentPageAreas[pageId]) {\n            newFragmentPageAreas[pageId] = [newArea];\n        } else {\n            newFragmentPageAreas[pageId].push(newArea);\n        }\n        onFragmentPageAreasChanged(newFragmentPageAreas, 'page area added');\n    }\n\n    const handleOnDeleteArea = (pageId, areaIdx) => {\n        const newFragmentPageAreas = JSON.parse(JSON.stringify(fragmentPageAreas));\n        newFragmentPageAreas[pageId].splice(areaIdx, 1);\n        onFragmentPageAreasChanged(newFragmentPageAreas, 'page area deleted');\n    }\n\n    return <div className='fragmentPages'>\n        {pages.map((p, idx) => {\n            return <div>\n                <input type=\"checkbox\" checked={(fragmentPages.indexOf(p.id)) >= 0 ? true : false} onChange={((e) => handleOnChange(e, idx)).bind(this)} /> Page #{idx + 1}\n            </div>\n        })}\n\n        {pages.map((p, idx) => {\n            return (fragmentPages.indexOf(p.id) >= 0) ?\n                    <div className='page'>\n                        <ImageAreas\n                            title={`Page #${idx+1}`}\n                            imgUrl={p.url} width = {500} areas={fragmentPageAreas[p.id] || [] }\n                            onNewAreaAdded={((area) => handleOnNewAreaAdded(p.id, area)).bind(this)}\n                            onDeleteArea={((areaIdx) => handleOnDeleteArea(p.id, areaIdx)).bind(this)}\n                        />\n                    </div>\n                    : '';\n        })}\n    </div>;\n};\n\nexport default FragmentPages;\n","import React, { useState, useRef } from 'react';\nimport PlayerWithNavButtons from '../PlayerWithNavButtons';\nimport FragmentPosition from './FragmentPosition';\nimport Fragments from './Fragments';\n\nimport Pages from \"./Pages\";\nimport FragmentPages from \"./FragmentPages\";\n\nimport './Editor.css';\n\nfunction Editor({ fragments, pages, videoUrl, onDataUpdated }) {\n    var [currentFragmentIdx, setCurrentFragmentIdx] = useState(-1);\n    const [videoPlayerPosSecs, setVideoPlayerPosSecs] = useState(0);\n\n    const $player = useRef(null);\n\n    if (currentFragmentIdx >= fragments.length) {\n        currentFragmentIdx = -1;\n        setCurrentFragmentIdx(-1);\n    }\n\n    const handleFragmentSelected = (fragmentIdx, fragment) => {\n        setCurrentFragmentIdx(fragmentIdx);\n        $player.current.seekToAndStop(fragment.startSec)\n    };\n\n    const handleOnPagesUpdated = (pages, message) => {\n        onDataUpdated({ fragments, pages, videoUrl }, message);\n    }\n\n    const onProgressUpdate = (playedSeconds) => {\n        setVideoPlayerPosSecs(parseFloat(playedSeconds.toFixed(1)));\n    };\n\n    const onFragmentChanged = (updatedFragment, newFragment, message) => {\n        const newFragments = JSON.parse(JSON.stringify(fragments));\n        newFragments[currentFragmentIdx] = updatedFragment;\n        if (newFragment) {\n            newFragments.splice(currentFragmentIdx + 1, 0, newFragment);\n        }\n        onDataUpdated({ fragments: newFragments, pages, videoUrl }, message);\n    };\n\n    const onFragmentsChanged = (newFragments, message) => {\n        onDataUpdated({ fragments: newFragments, pages, videoUrl }, message);\n    }\n\n    const onFragmentPagesChanged = (currentFragmentSelectedPages, message) => {\n        const newFragments = JSON.parse(JSON.stringify(fragments));\n        newFragments[currentFragmentIdx].pages = currentFragmentSelectedPages;\n        onDataUpdated({ fragments: newFragments, pages, videoUrl }, message);\n    };\n\n    const onFragmentPageAreasChanged = (currentFragmentPageAreas, message) => {\n        const newFragments = JSON.parse(JSON.stringify(fragments));\n        newFragments[currentFragmentIdx].pageAreas = currentFragmentPageAreas;\n        onDataUpdated({ fragments: newFragments, pages, videoUrl }, message);\n    };\n\n    const getPrevFragmentEndSec = () => {\n        if (currentFragmentIdx == 0) {\n            return 0;\n        }\n        return fragments[currentFragmentIdx-1].endSec;\n    }\n\n    return (\n            <div className='editor'>\n                <div>\n                    <PlayerWithNavButtons videoUrl={videoUrl} onProgressUpdate={onProgressUpdate} ref={$player} />\n\n                    {currentFragmentIdx >= 0\n                        ?\n                        <div>\n                            <FragmentPosition\n                                $player={$player.current}\n                                fragment={fragments[currentFragmentIdx]}\n                                fragmentIdx={currentFragmentIdx}\n                                onFragmentChanged={onFragmentChanged}\n                                videoPlayerPosSecs={videoPlayerPosSecs}\n                                getPrevFragmentEndSec={getPrevFragmentEndSec}\n                            />\n                            <FragmentPages\n                                pages={pages || []}\n                                fragmentPages={fragments[currentFragmentIdx].pages || []}\n                                fragmentPageAreas={fragments[currentFragmentIdx].pageAreas || {}}\n                                onFragmentPagesChanges={onFragmentPagesChanged}\n                                onFragmentPageAreasChanged={onFragmentPageAreasChanged}\n                            />\n                        </div>\n                        : ''\n                    }\n\n                </div>\n\n                <Fragments fragments={fragments} onFragmentSelected={handleFragmentSelected} onFragmentsChanged={onFragmentsChanged} />\n\n                {/*<Pages pages={pages || []} onPagesUpdated={handleOnPagesUpdated} />*/}\n\n            </div>\n    );\n}\n\nexport default Editor;\n","import React, { useState } from 'react';\n\nimport './EditorDataProvider.scss';\n\nconst OP_NEW = 'new';\nconst OP_LOAD_OLD = 'loadOld';\nconst OP_RESTORE = 'restore';\n\nexport default function EditorDataProvider({ lastStateFromLocalStorage, onDataProvided}) {\n    const [oldState, setOldState] = useState('');\n    const [opType, setOpType] = useState('');\n    const [videoUrl, setVideoUrl] = useState('');\n    const [pages, setPages] = useState('');\n\n    const handleOnSelect = (opType) => {\n        setOpType(opType);\n    }\n\n    const handleOldStateChanged = (e) => {\n        setOldState(e.target.value);\n    }\n\n    const handleOnVideoUrlChanged = (e) => {\n        setVideoUrl(e.target.value);\n    }\n\n    const handleOnPagesChanged = (e) => {\n        setPages(e.target.value);\n    }\n\n    const handleOnSubmit = () => {\n        switch (opType) {\n            case OP_LOAD_OLD:\n                onDataProvided(JSON.parse(oldState));\n                return;\n            case OP_RESTORE:\n                onDataProvided(JSON.parse(lastStateFromLocalStorage));\n                return;\n            case OP_NEW: {\n                onDataProvided({\n                    videoUrl,\n                    fragments: [],\n                    pages: pages.trim().split(\"\\n\").map(p => p.trim()).filter(p => p).map(pageUrl => ({\n                        url: pageUrl,\n                        id: '' + (new Date().getTime()) + Math.random()\n                    }))\n                });\n                return\n            }\n\n            default:\n                alert('TBD');\n        }\n    }\n\n    return <table className='editorDataProvider'><tbody><tr>\n            <td className='firstCol' onClick={handleOnSelect.bind(this, OP_NEW)}>\n                <input type='radio' name='operation' onChange={handleOnSelect.bind(this, OP_NEW)} checked={opType == OP_NEW} />\n                Create new\n            </td>\n            <td className='secondCol'>\n                <p>\n                    Video URL:\n                </p>\n                <p>\n                    <input type='text' onChange={handleOnVideoUrlChanged} value={videoUrl} readOnly={opType != OP_NEW} />\n                </p>\n                <p>\n                    Sheet music pages (one URL per line):\n                </p>\n                <p>\n                    <textarea onChange={handleOnPagesChanged} value={pages}  readOnly={opType != OP_NEW} />\n                </p>\n            </td>\n        </tr><tr>\n            <td className='firstCol' onClick={handleOnSelect.bind(this, OP_LOAD_OLD)}>\n                <input type='radio' name='operation' onChange={handleOnSelect.bind(this, OP_LOAD_OLD)} checked={opType == OP_LOAD_OLD} />\n                Load old\n            </td>\n            <td className='secondCol'>\n                <p>\n                    Old fragments content (paste here)\n                </p>\n                <p>\n                    <textarea onChange={handleOldStateChanged} value={oldState} readOnly={opType != OP_LOAD_OLD} />\n                </p>\n            </td>\n        </tr>{lastStateFromLocalStorage\n            ? <tr>\n                <td className='firstCol' onClick={handleOnSelect.bind(this, OP_RESTORE)}>\n                    <input type='radio' name='operation' onChange={handleOnSelect.bind(this, OP_RESTORE)} checked={opType == OP_RESTORE}  />\n                    Restore from local storage\n                </td>\n                <td className='secondCol'>\n                    <a href={JSON.parse(lastStateFromLocalStorage).videoUrl} target='_blank'>{JSON.parse(lastStateFromLocalStorage).videoUrl}</a>\n                </td>\n            </tr>\n            : ''\n        }{opType ? <tr>\n            <td className='lastRow'>\n                <button onClick={handleOnSubmit}>Submit</button>\n            </td>\n            <td className='lastRow'></td>\n        </tr> : ''}</tbody></table>;\n\n};","import React, { useState, useRef } from 'react';\nimport Editor from './editor/Editor';\nimport { transformFromHumanReadable, transformToHumanReadable} from \"emptybars-common/utils\";\n\nimport './EditorLoader.scss';\nimport EditorDataProvider from \"./editor/EditorDataProvider\";\n\nconst LOCAL_STORAGE_KEY = 'emptybarsEditorData';\n\nfunction EditorLoader(initialData) {\n    var [data, setData] = useState(transformFromHumanReadable(initialData));\n    var [history, setHistory] = useState([]);\n    var [redo, setRedo] = useState([]);\n    const textareaRef = useRef(null);\n\n    const doSetData = (newData) => {\n        setData(newData);\n        window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(transformToHumanReadable(newData)));\n    }\n\n\n    const handleOnDataUpdated = (newData, operationName) => {\n        const historyChunk = {oldData: JSON.parse(JSON.stringify(data)), newData: JSON.parse(JSON.stringify(newData)), operationName};\n        doSetData(newData);\n\n        history.push(historyChunk);\n        setHistory(history);\n\n        redo = [];\n        setRedo(redo)\n    }\n\n    const handleOnDataProvided = (providedData) => {\n        doSetData(transformFromHumanReadable(providedData));\n    }\n\n    const handleCopyClick = () => {\n        textareaRef.current.select();\n        document.execCommand('copy');\n        alert('Copied!');\n    }\n\n    const handleUndo = () => {\n        const undoData = history.pop();\n        doSetData(undoData.oldData);\n\n        setHistory(history);\n\n        redo.push(undoData);\n        setRedo(redo);\n    }\n\n    const handleRedo = () => {\n        const redoData = redo.pop();\n        doSetData(redoData.newData);\n\n        history.push(redoData);\n        setHistory(history);\n\n        setRedo(redo);\n    }\n\n    return <div>{data.videoUrl ?\n            <div className=\"editorLoader\">\n                <Editor {...data} onDataUpdated={handleOnDataUpdated}/>\n                <textarea readOnly={true} value={JSON.stringify(transformToHumanReadable(data), null, 2)}\n                          ref={textareaRef}/>\n                <div className=\"copyButton\" onClick={handleCopyClick}>copy</div>\n                {history.length > 0\n                    ? <div>\n                        Last operation: {history[history.length - 1].operationName} <span className=\"undoButton\"\n                                                                                          onClick={handleUndo}>undo</span>\n                    </div>\n                    : ''\n                }\n                {redo.length > 0\n                    ? <div>\n                        Cancelled operation: {redo[redo.length - 1].operationName} <span className=\"undoButton\"\n                                                                                         onClick={handleRedo}>redo</span>\n                    </div>\n                    : ''\n                }\n            </div>\n            :\n            <EditorDataProvider lastStateFromLocalStorage={window.localStorage.getItem(LOCAL_STORAGE_KEY)} onDataProvided={handleOnDataProvided} />\n    }</div>;\n}\n\nexport default EditorLoader;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport EditorLoader from './EditorLoader';\n\nimport {initFragmentsPlayer} from \"emptybars-common/initialiser\";\n\ninitFragmentsPlayer(($element, data) => {\n\n    const {fragments, pages, videoUrl, videoTitle} = data;\n\n    ReactDOM.render(\n        <React.StrictMode>\n          <EditorLoader fragments={fragments || []} pages={pages || []} videoUrl={videoUrl} />\n        </React.StrictMode>,\n        $element\n    );\n});\n\n"],"sourceRoot":""}