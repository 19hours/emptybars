{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["IndexPage","data","indexedData","composers","nodes","forEach","node","relativeDirectory","name","fields","content","compositions","addComposer","composerSlug","split","compositionSlug","performers","addComposition","performerSlug","addPerformer","composerSlugsSorted","map","sort","renderComposition","performersSorted","Object","keys","key","to","renderPerformer","composition","title","compositionsSorted","query"],"mappings":"4FAAA,0GAkFeA,UAnDG,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACXC,EAAc,GACpBD,EAAKE,UAAUC,MAAMC,SAAQ,SAAAC,IA3BjC,SAAqBJ,EAAaI,GAC9BJ,EAAYI,EAAKC,mBAAqB,CAClCC,KAAMF,EAAKG,OAAOC,QAClBC,aAAc,IAyBdC,CAAYV,EAAaI,MAE7BL,EAAKU,aAAaP,MAAMC,SAAQ,SAAAC,IAvBpC,SAAwBJ,EAAaI,GACjC,IAAMO,EAAeP,EAAKC,kBAAkBO,MAAM,KAAK,GACjDC,EAAkBT,EAAKC,kBAAkBO,MAAM,KAAK,GAC1DZ,EAAYW,GAAcF,aAAaI,GAAmB,CACtDP,KAAMF,EAAKG,OAAOC,QAClBM,WAAY,IAmBZC,CAAef,EAAaI,MAEhCL,EAAKe,WAAWZ,MAAMC,SAAQ,SAAAC,IAjBlC,SAAsBJ,EAAaI,GAC/B,IAAMO,EAAeP,EAAKC,kBAAkBO,MAAM,KAAK,GACjDC,EAAkBT,EAAKC,kBAAkBO,MAAM,KAAK,GACpDI,EAAgBZ,EAAKC,kBAAkBO,MAAM,KAAK,GACxDZ,EAAYW,GAAcF,aAAaI,GAAiBC,WAAWE,GAAiB,CAChFV,KAAMF,EAAKG,OAAOC,SAalBS,CAAajB,EAAaI,MAG9B,IAAMc,EAAsBnB,EAAKE,UAAUC,MAAMiB,KAAI,SAAAf,GAAI,OAAIA,EAAKC,qBAClEa,EAAoBE,OAEpB,IAMMC,EAAoB,SAACV,EAAcE,GACrC,IAAMS,EAAmBC,OAAOC,KAAKxB,EAAYW,GAAcF,aAAaI,GAAiBC,YAE7F,OADAQ,EAAiBF,OACV,wBAAIK,IAAKZ,GACXb,EAAYW,GAAcF,aAAaI,GAAiBP,KACzD,4BACKgB,EAAiBH,KAAI,SAAAH,GAAa,OAZvB,SAACL,EAAcE,EAAiBG,GACpD,OAAO,wBAAIS,IAAKT,GACZ,kBAAC,OAAD,CAAMU,GAAOf,EAAL,IAAqBE,EAArB,IAAwCG,GAAhD,gBAA+EhB,EAAYW,GAAcF,aAAaI,GAAiBC,WAAWE,GAAeV,OAUtHqB,CAAgBhB,EAAcE,EAAiBG,SAgBlG,OAAO,kBAAC,IAAD,CAAQY,YAAY,iBACvB,kBAAC,IAAD,CAAKC,MAAM,SACX,4BACCX,EAAoBC,KAdF,SAACR,GACpB,IAAMmB,EAAqBP,OAAOC,KAAKxB,EAAYW,GAAcF,cAEjE,OADAqB,EAAmBV,OACZ,wBAAIK,IAAKd,GACXX,EAAYW,GAAcL,KAC3B,4BACKwB,EAAmBX,KAAI,SAAAN,GAAe,OAAIQ,EAAkBV,EAAcE,cAepF,IAAMkB,EAAK","file":"component---src-pages-index-js-798b972a5821f80443b4.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nfunction addComposer(indexedData, node) {\n    indexedData[node.relativeDirectory] = {\n        name: node.fields.content,\n        compositions: {},\n    };\n}\n\nfunction addComposition(indexedData, node) {\n    const composerSlug = node.relativeDirectory.split('/')[0];\n    const compositionSlug = node.relativeDirectory.split('/')[1];\n    indexedData[composerSlug].compositions[compositionSlug] = {\n        name: node.fields.content,\n        performers: {},\n    };\n}\n\nfunction addPerformer(indexedData, node) {\n    const composerSlug = node.relativeDirectory.split('/')[0];\n    const compositionSlug = node.relativeDirectory.split('/')[1];\n    const performerSlug = node.relativeDirectory.split('/')[2];\n    indexedData[composerSlug].compositions[compositionSlug].performers[performerSlug] = {\n        name: node.fields.content,\n    };\n}\n\nconst IndexPage = ({ data }) => {\n    const indexedData = {};\n    data.composers.nodes.forEach(node => {\n        addComposer(indexedData, node);\n    });\n    data.compositions.nodes.forEach(node => {\n        addComposition(indexedData, node);\n    });\n    data.performers.nodes.forEach(node => {\n        addPerformer(indexedData, node);\n    });\n\n    const composerSlugsSorted = data.composers.nodes.map(node => node.relativeDirectory);\n    composerSlugsSorted.sort();\n\n    const renderPerformer = (composerSlug, compositionSlug, performerSlug) => {\n        return <li key={performerSlug}>\n            <Link to={`${composerSlug}/${compositionSlug}/${performerSlug}`}>performed by {indexedData[composerSlug].compositions[compositionSlug].performers[performerSlug].name}</Link>\n        </li>\n    }\n\n    const renderComposition = (composerSlug, compositionSlug) => {\n        const performersSorted = Object.keys(indexedData[composerSlug].compositions[compositionSlug].performers);\n        performersSorted.sort();\n        return <li key={compositionSlug}>\n            {indexedData[composerSlug].compositions[compositionSlug].name}\n            <ul>\n                {performersSorted.map(performerSlug => renderPerformer(composerSlug, compositionSlug, performerSlug))}\n            </ul>\n        </li>\n    }\n\n    const renderComposer = (composerSlug) => {\n        const compositionsSorted = Object.keys(indexedData[composerSlug].compositions);\n        compositionsSorted.sort();\n        return <li key={composerSlug}>\n            {indexedData[composerSlug].name}\n            <ul>\n                {compositionsSorted.map(compositionSlug => renderComposition(composerSlug, compositionSlug))}\n            </ul>\n        </li>;\n    }\n\n    return <Layout composition='EmptyBars.org'>\n        <SEO title=\"Home\"/>\n        <ul>\n        {composerSlugsSorted.map(renderComposer)}\n        </ul>\n    </Layout>\n}\n\nexport default IndexPage\n\nexport const query = graphql`\n    query MyQuery {\n        composers: allFile(filter: {fields: {type: {eq: \"composerName\"}}}) {\n            nodes {\n              relativeDirectory\n              fields {\n                content\n              }\n            }\n        }\n        compositions: allFile(filter: {fields: {type: {eq: \"compositionName\"}}}) {\n            nodes {\n              relativeDirectory\n              fields {\n                content\n              }\n            }\n        }\n        performers: allFile(filter: {fields: {type: {eq: \"performerName\"}}}) {\n            nodes {\n              relativeDirectory\n              fields {\n                content\n              }\n            }\n        }\n    } \n\n`"],"sourceRoot":""}