{"version":3,"sources":["ReactPlayerWrapper.js","player/Fragments.js","player/ImageAreas.js","player/FragmentPages.js","player/Player.js","ImagesLoader.js","index.js"],"names":["ReactPlayerWrapper","props","state","progress","duration","gotoAfterStopSec","endSec","playing","$player","React","createRef","this","setState","current","seekTo","playedSeconds","_stopAndReturn","onProgressUpdate","startSec","mode","Math","max","className","ref","url","videoUrl","width","height","onDuration","_handleDuration","bind","onProgress","_handleProgress","onPlay","_handleOnPlay","progressInterval","onPause","_handleStop","onEnded","controls","config","youtube","playerVars","origin","window","location","secsToString","Component","Fragments","fragments","playInterval","activeFragments","useState","playInput","setPlayInput","onPlayInputChange","e","target","value","handleClickFragment","fragmentIdx","parseFragmentPoint","str","split","join","number","parseInt","length","console","error","secondsShift","trim","isNaN","parseFloat","isNumeric","parsePlayInput","fromFragmentStr","untilFragmentStr","fromFragment","fromFragmentDelta","untilFragment","untilFragmentDelta","map","key","indexOf","onClick","onChange","startFragmentIdx","startFragmentIdxDelta","stopFragmentIdx","stopFragmentIdxDelta","ImageAreas","coeffOrigImageToScreenCoords","title","image","areas","canvasRef","useRef","drawCanvas","context","getContext","drawImage","forEach","a","idx","fillStyle","fillRect","x","y","useEffect","FragmentPages","images","pages","fragmentPageAreas","fragmentPages","zoom","setZoom","lastScrollHash","setLastScrollHash","fragmentPagesRef","findScrollareaNode","i","childNodes","calculatePageHeight","hash","JSON","stringify","selectedPageIdx","puid","id","findFirstSelectedPageIdx","page","container","invariant","findPageNode","scrollTop","offsetTop","Object","keys","fragmentPagesStyles","style","src","p","Player","setActiveFragments","setVideoPlayerPosSecs","activePages","concat","getActivePages","pageId","pageAreas","getActivePageAreas","toFixed","newActiveFragments","fragment","push","from","until","playFragment","imageUrls","onImagesLoaded","Array","fill","setProgress","interval","setInterval","delta","random","parse","totalLoaded","onImageLoaded","clearInterval","imageUrl","Image","onload","onerror","percent","reduce","prevVal","currVal","renderProgress","initFragmentsPlayer","$element","data","ReactDOM","render","StrictMode","ImagesLoader","transformFromHumanReadable"],"mappings":"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","file":"static/js/main.b5b7c7bb.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport ReactPlayer from 'react-player';\n\nimport { secsToString } from 'emptybars-common/utils'\n\nimport './ReactPlayerWrapper.scss';\n\nclass ReactPlayerWrapper extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            progress: -1,\n            duration: -1,\n            gotoAfterStopSec: -1,\n            endSec: -1,\n            playing: true,\n        };\n        this.$player = React.createRef();\n    }\n\n    _handleDuration(duration) {\n        this.setState({duration: duration});\n    }\n\n    _stopAndReturn() {\n        const gotoAfterStopSec = this.state.gotoAfterStopSec;\n        this.setState({\n            endSec: -1,\n            gotoAfterStopSec: -1,\n            playing: false\n        });\n        this.$player.current.seekTo(gotoAfterStopSec, 'seconds');\n    }\n\n    _handleProgress({ playedSeconds }) {\n        if (this.state.endSec > 0 && playedSeconds > this.state.endSec) {\n            this._stopAndReturn();\n        }\n        this.setState({progress: playedSeconds});\n        this.props.onProgressUpdate(playedSeconds);\n    };\n\n    _handleOnPlay() {\n        if (!this.state.playing) {\n            this.setState({\n                playing: true,\n                endSec: -1,\n                gotoAfterStopSec: -1\n            });\n        }\n    }\n\n    _handleStop() {\n        this.setState({playing: false});\n    }\n\n    playFragment(startSec, endSec, mode) {\n        this.$player.current.seekTo(startSec, 'seconds');\n        this.setState({\n            // TODO: remove magic strings\n            gotoAfterStopSec: Math.max(mode === 'STAY_AT_END' ? endSec : startSec, 0),\n            endSec: Math.max(endSec, 0.01),\n            playing: true\n        });\n    }\n\n    render() {\n            return (\n                <div className='playWithNavButtons'>\n                    <ReactPlayer\n                        ref={this.$player}\n                        url={this.props.videoUrl}\n                        width='100%'\n                        height='100%'\n                        onDuration={this._handleDuration.bind(this)}\n                        onProgress={this._handleProgress.bind(this)}\n                        onPlay={this._handleOnPlay.bind(this)}\n                        progressInterval={100}\n                        onPause={this._handleStop.bind(this)}\n                        onEnded={this._handleStop.bind(this)}\n                        playing={this.state.playing}\n                        controls={true}\n                        config={{\n                            youtube: {\n                                playerVars: {origin: window.location.origin}\n                            }\n                        }}\n                    />\n                    <div className='positionAndControls'>\n                        Current position: <span className='position'>{secsToString(this.state.progress)}</span>\n                    </div>\n                </div>\n            );\n    }\n}\n\nexport default ReactPlayerWrapper;","import React, {useState, useRef, useEffect} from 'react';\nimport { secsToString } from \"emptybars-common/utils\";\n\nimport './Fragments.scss';\n\nfunction Fragments({ fragments, playInterval, activeFragments }) {\n    const [playInput, setPlayInput] = useState(\"\");\n\n    const onPlayInputChange = (e) => {\n        setPlayInput(e.target.value);\n    }\n\n    const handleClickFragment = (fragmentIdx) => {\n        onPlayInputChange({\n            target: {\n                value: (fragmentIdx+1) + ':' + (fragmentIdx+1)\n            }\n        });\n        playInterval(fragments[fragmentIdx].startSec, fragments[fragmentIdx].endSec);\n    };\n\n    const handlePlayClick = () => {\n        const [startFragmentIdx, startFragmentIdxDelta, stopFragmentIdx, stopFragmentIdxDelta] = parsePlayInput(playInput);\n        playInterval(\n            fragments[startFragmentIdx-1].startSec + startFragmentIdxDelta,\n            fragments[stopFragmentIdx-1].endSec + stopFragmentIdxDelta\n        )\n    }\n\n    function isNumeric(str) {\n        if (typeof str != \"string\") return false // we only process strings!\n        return !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...\n            !isNaN(parseFloat(str)) // ...and ensure strings of whitespace fail\n    }\n\n    const parseFragmentPoint = (str) => {\n        str = str.split('-').join('+-');\n        const split = str.split('+');\n        const number = parseInt(split[0]);\n        if (number != split[0]) {\n            return [false, false];\n        }\n        if (number <= 0 || number > fragments.length) {\n            console.error(\"Fragment \" + number + \" is out of range. Max=\" + fragments.length)\n            return [false, false];\n        }\n        if (split.length == 1) {\n            return [number, 0];\n        } else if (split.length == 2) {\n            const secondsShift = split[1].split('s').join('').trim()\n            if (!isNumeric(secondsShift)) {\n                console.error(secondsShift + \" is not a number\");\n                return [false, false];\n            }\n            return [number, parseFloat(secondsShift)];\n        } else {\n            return [false, false];\n        }\n    }\n\n    const parsePlayInput = (playInput) => {\n        const split = playInput.split(':');\n        if (split.length != 2) {\n            return false;\n        }\n        const fromFragmentStr = split[0];\n        const untilFragmentStr = split[1];\n        var [fromFragment, fromFragmentDelta] = parseFragmentPoint(fromFragmentStr);\n        if (!fromFragment) {\n            return false;\n        }\n        var [untilFragment, untilFragmentDelta] = parseFragmentPoint(untilFragmentStr);\n        if (!untilFragment) {\n            return false;\n        }\n        return [fromFragment, fromFragmentDelta, untilFragment, untilFragmentDelta];\n    }\n\n    return (\n        <div className='fragments'>\n            <div>Fragments:</div>\n            <div className='scrolling'>\n\n                {fragments.map(({ startSec, endSec }, key) => (\n                    <div\n                        className={`button ${\n                            (activeFragments.indexOf(key) >= 0) ? 'active' : ''\n                        }`}\n                        key={key}\n                        onClick={handleClickFragment.bind(null, key)}\n                    >\n                        #{key+1}\n                    </div>\n                ))}\n            </div>\n            <div>Play fragments: <input onChange={onPlayInputChange} value={playInput}/></div>\n            {!parsePlayInput(playInput)\n                ? <div>\n                    <div className=\"error\">Invalid format!</div>\n                    <div>Allowed formats: <br/>\n                        <span>1:1</span> - Play fragment 1 <br/>\n                        <span>1:3</span> - Play fragments 1, 2 and 3<br/>\n                        <span>1-10s:2+15.2s</span> - Play fragments 1 and 2; start 10 seconds earlier and finish 15.2\n                        seconds later\n                    </div>\n                </div>\n                : <button onClick={handlePlayClick}>Play</button>\n            }\n         </div>);\n}\n\nexport default Fragments;\n","import React, { useState, useRef, useEffect } from 'react';\n\nimport './ImageAreas.scss';\n\nfunction ImageAreas({ title, image, width, areas }) {\n    // var [height, setHeight] = useState(100);\n    var canvasRef = useRef(null);\n    var coeffOrigImageToScreenCoords;\n    var height;\n\n    if (image && image.width && image.height) {\n        coeffOrigImageToScreenCoords = (width * 1.0 / image.width);\n        height = parseInt(image.height * coeffOrigImageToScreenCoords);\n    } else {\n        coeffOrigImageToScreenCoords = -1;\n        height = -1;\n    }\n\n    const drawCanvas = () => {\n        if (image && image.width && image.height && canvasRef && canvasRef.current) {\n            const context = canvasRef.current.getContext(\"2d\");\n            context.drawImage(image, 0, 0, image.width, image.height, 0, 0, width, height);\n\n            areas.forEach((a, idx) => {\n                context.fillStyle = 'rgba(255, 255, 0, 0.5)';\n                context.fillRect(a.x * coeffOrigImageToScreenCoords, a.y * coeffOrigImageToScreenCoords, a.width * coeffOrigImageToScreenCoords, a.height * coeffOrigImageToScreenCoords);\n            });\n        }\n    }\n\n    useEffect(() => {\n        drawCanvas();\n    });\n\n    if (image && image.width && image.height) {\n        drawCanvas();\n\n        return (\n            <div className='imageAreas'>\n                <div className='canvas'>\n                    <div className='title'>{title}</div>\n                    <canvas width={width} height={height} ref={canvasRef}>\n                    </canvas>\n                </div>\n            </div>\n        );\n    } else {\n        return <div className='imageAreas'>\n            <div className='canvas'>\n                <div className='title'>{title}</div>\n                <div>Error loading</div>\n            </div>\n        </div>\n    }\n}\n\nexport default ImageAreas;","import React from 'react';\nimport { useRef, useState } from 'react';\nimport ImageAreas from \"./ImageAreas\";\n\nimport './FragmentPages.scss';\n\nfunction FragmentPages({ images, pages, fragmentPages, fragmentPageAreas }) {\n    const [zoom, setZoom] = useState(1);\n    const [lastScrollHash, setLastScrollHash] = useState(\"\");\n    const fragmentPagesRef = useRef();\n\n    const handleZoomIn = () => {\n        setZoom(zoom + 0.1);\n    }\n\n    const handleZoomOut = () => {\n        setZoom(zoom - 0.1);\n    }\n\n    const handleReset = () => {\n        setZoom(1);\n    }\n\n    const findFirstSelectedPageIdx = () => {\n        var selectedPageIdx = -1;\n        for (var idx = 0; idx < pages.length; idx++) {\n            const puid = pages[idx].id;\n            if (fragmentPageAreas[puid] && fragmentPageAreas[puid].length) {\n                selectedPageIdx = idx;\n                break;\n            }\n        }\n        return selectedPageIdx;\n    }\n\n    const findScrollareaNode = () => {\n        for (var i = 0; i < fragmentPagesRef.current.childNodes.length; i++) {\n            if (fragmentPagesRef.current.childNodes[i].className == 'scrollArea') {\n                return fragmentPagesRef.current.childNodes[i];\n            }\n        }\n        throw 'Cannot find scrollArea';\n    }\n\n    const findPageNode = (selectedPageIdx) => {\n        var container = findScrollareaNode();\n        var invariant = 0;\n        for (var i = 0; i < container.childNodes.length; i++) {\n            if (container.childNodes[i].className == \"page\") {\n                if (invariant == selectedPageIdx) {\n                    return container.childNodes[i];\n                }\n                invariant ++;\n            }\n        }\n        throw \"cannot find page \" + selectedPageIdx;\n    }\n\n    const calculatePageHeight = () =>\n        parseInt(500*zoom*297/210 + 20);\n\n    const hash = JSON.stringify(fragmentPageAreas);\n    if (lastScrollHash != hash && fragmentPagesRef.current) {\n        setLastScrollHash(hash);\n        const selectedPageIdx = findFirstSelectedPageIdx();\n        if (selectedPageIdx >= 0) {\n            var page = findPageNode(selectedPageIdx);\n            fragmentPagesRef.current.scrollTop = page.offsetTop - findScrollareaNode().offsetTop;\n            if (Object.keys(fragmentPageAreas).length > 1) {\n                fragmentPagesRef.current.scrollTop += parseInt(calculatePageHeight() / 2);\n            }\n        }\n    }\n\n    const fragmentPagesStyles = {\n        height: calculatePageHeight() + \"px\"\n    }\n\n    return <div>\n        <div className='fragmentPages' ref={fragmentPagesRef} style={fragmentPagesStyles}>\n            <div className='zoom'>\n                <img src='https://images2.imgbox.com/22/21/4gO3I6ii_o.png?download=true' width='32' onClick={handleZoomIn} />\n                <img src='https://images2.imgbox.com/1b/b2/L4tgMq2a_o.png?download=true' width='32' onClick={handleZoomOut} />\n                <img src='https://images2.imgbox.com/f3/d5/paRxNKm0_o.png?download=true' width='32' onClick={handleReset} />\n            </div>\n            <div className='scrollArea'>\n            {pages.map((p, idx) => {\n                return <div className='page' key={\"fragmentpage\" + idx}>\n                            <ImageAreas\n                                title={`Page #${idx+1}`}\n                                image={images[idx]}\n                                width = {parseInt(500 * zoom)} areas={fragmentPageAreas[p.id] || [] }\n                            />\n                        </div>;\n            })}\n            </div>\n        </div>\n    </div>;\n};\n\nexport default FragmentPages;\n","import React, { useState, useRef } from 'react';\nimport ReactPlayerWrapper from '../ReactPlayerWrapper';\nimport Fragments from './Fragments';\n\nimport FragmentPages from \"./FragmentPages\";\n\nimport './Player.css';\n\nfunction Player({ fragments, images, pages, videoUrl }) {\n    const [activeFragments, setActiveFragments] = useState([]);\n    const [videoPlayerPosSecs, setVideoPlayerPosSecs] = useState(0);\n\n    const $player = useRef(null);\n\n    const handlePlayInterval = (from, until) => {\n        $player.current.playFragment(from, until)\n    };\n\n    const onProgressUpdate = (playedSeconds) => {\n        setVideoPlayerPosSecs(parseFloat(playedSeconds.toFixed(1)));\n        var newActiveFragments = [];\n        fragments.forEach((fragment, idx) => {\n            if (fragment.startSec <= playedSeconds && fragment.endSec >= playedSeconds) {\n                newActiveFragments.push(idx);\n            }\n        });\n        setActiveFragments(newActiveFragments);\n    };\n\n    const getActivePages = () => {\n        var activePages = [];\n        activeFragments.forEach(fragmentIdx => {\n            activePages = activePages.concat(fragments[fragmentIdx].pages);\n        });\n        return activePages;\n    }\n\n    const getActivePageAreas = () => {\n        var areas = {};\n        activeFragments.forEach(fragmentIdx => {\n            for (const pageId in fragments[fragmentIdx].pageAreas) {\n                const pageAreas = fragments[fragmentIdx].pageAreas[pageId];\n                if (areas[pageId]) {\n                    areas[pageId] = areas[pageId].concat(pageAreas)\n                } else {\n                    areas[pageId] = pageAreas;\n                }\n            }\n        });\n        return areas;\n    }\n\n    return (\n            <div className='player'>\n                <div>\n                    <FragmentPages\n                        images={images}\n                        pages={pages || []}\n                        fragmentPages={getActivePages()}\n                        fragmentPageAreas={getActivePageAreas()}\n                        />\n                </div>\n\n                <div>\n                    <ReactPlayerWrapper videoUrl={videoUrl} onProgressUpdate={onProgressUpdate} ref={$player} />\n                    <Fragments fragments={fragments} playInterval={handlePlayInterval} activeFragments={activeFragments}/>\n                </div>\n\n            </div>\n    );\n}\n\nexport default Player;\n","import React, {useState , useEffect} from 'react';\n\n\nexport default ( { imageUrls, onImagesLoaded }) => {\n    const [progress, setProgress] = useState(new Array(imageUrls.length).fill(0));\n\n    useEffect(() => {\n        const progress = new Array(imageUrls.length).fill(0);\n\n        const interval = setInterval(() => {\n            const delta = parseInt(Math.random() * 3);\n            for (var idx = 0; idx < progress.length; idx++) {\n                progress[idx] += delta;\n                if (progress[idx] > 50) {\n                    progress[idx] -= parseInt(delta/2);\n                }\n                if (progress[idx] > 100) {\n                    progress[idx] = 100;\n                }\n            }\n            setProgress(JSON.parse(JSON.stringify(progress)));\n        }, 500);\n\n        var totalLoaded = 0;\n        const onImageLoaded = (idx) => {\n            progress[idx] = 100;\n            setProgress(JSON.parse(JSON.stringify(progress)));\n            totalLoaded += 1;\n            if (totalLoaded >= imageUrls.length) {\n                onImagesLoaded(images);\n                clearInterval(interval);\n            }\n        }\n\n        const images = imageUrls.map((imageUrl, idx) => {\n            const image = new Image();\n            image.src= imageUrl;\n            image.onload = () => { onImageLoaded(idx) }\n            image.onerror = (e) => { console.error(e); onImageLoaded(idx) }\n            return image;\n        });\n\n    }, []);\n\n    const renderProgress = () => {\n        const percent = parseInt(progress.reduce((prevVal, currVal) => prevVal + currVal, 0) / Math.max(0, progress.length));\n        return parseInt(progress.reduce((prevVal, currVal) => prevVal + currVal, 0) / Math.max(0, progress.length)) + \"%\" +\n            (percent == 100 ? '...' : '');\n    }\n\n    return <div>Loading {renderProgress()}</div>;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Player from './player/Player';\nimport { transformFromHumanReadable} from \"emptybars-common/utils\";\nimport { initFragmentsPlayer } from \"emptybars-common/initialiser\";\n\nimport ImagesLoader from './ImagesLoader';\n\ninitFragmentsPlayer(($element, data) => {\n\n    const onImagesLoaded = (images) => {\n        return ReactDOM.render(\n                    <React.StrictMode>\n                        <Player images={images} {...transformFromHumanReadable(data)} />\n                    </React.StrictMode>,\n                    $element\n                );\n    }\n\n    ReactDOM.render(\n        <React.StrictMode>\n            <ImagesLoader imageUrls={data.pages.map(p => p.url)} onImagesLoaded={onImagesLoaded} />\n        </React.StrictMode>,\n        $element\n    );\n});\n\n"],"sourceRoot":""}